
            <div id="loadlink">
                <p><a>Open this file in the Lurch web app</a></p>
                <script language="javascript">
                    const link = document.querySelector( '#loadlink > p > a' )
                    const thisURL = encodeURIComponent( window.location.href )
                    link?.setAttribute( 'href', 'http://127.0.0.1:5500/student.html?load=' + thisURL )
                </script>
            </div>
        
            <div id="metadata" style="display: none;"><div data-category="settings" data-key="shell style" data-value-type="json">"minimal"</div><div data-category="main" data-key="header" data-value-type="html"><h1>Propositional Logic</h1>
<p>This is a basic library of the rules that define a natural deduction style formal system for Propositional Logic.</p>
<hr>
<h3><strong>Constants</strong></h3>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Declare ⇔, and, ⇒, or, ¬, contradiction&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Declare </span><span class="ML__cmr">⇔</span><span class="ML__text">, and, </span><span class="ML__cmr">⇒</span><span class="ML__text">, or, </span><span class="ML__ams">¬</span><span class="ML__text">, and </span><span class="ML__cmr">→←</span></span></span></span></span></p>
<h3><strong>Rules</strong></h3>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p style="text-align: left;"><strong>and+</strong></p>
<p style="text-align: left;"><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span><br><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume V&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span><br><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W and V&quot;" data-metadata_latex="&quot; W\\text{ and } V&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__text"> and </span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
</div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>and-</strong></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume W and V&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__text"> and </span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span><br><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W&quot;" data-metadata_latex="&quot;W&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span><br><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;V&quot;" data-metadata_latex="&quot;V&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
</div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>implies+</strong></p>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;premise&quot;" data-shell_title="">
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span><br><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;V&quot;" data-metadata_latex="&quot;V&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
</div>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W implies V&quot;" data-metadata_latex="&quot; W\\Rightarrow V&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__cmr">⇒</span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
</div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>implies- (modus ponens)</strong></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume W implies V&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__cmr">⇒</span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span><br><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span><br><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;V&quot;" data-metadata_latex="&quot;V&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
</div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>iff+</strong></p>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;premise&quot;" data-shell_title="">
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span><br><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;V&quot;" data-metadata_latex="&quot;V&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span>&nbsp;</p>
</div>
<p>&nbsp;</p>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;premise&quot;" data-shell_title="">
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume V&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span><br><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W&quot;" data-metadata_latex="&quot;W&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span></p>
</div>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W iff V&quot;" data-metadata_latex="&quot; W\\Leftrightarrow V&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__cmr">⇔</span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
</div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>iff-</strong></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume W iff V&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__cmr">⇔</span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;subproof&quot;" data-shell_title="">
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span><br><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;V&quot;" data-metadata_latex="&quot;V&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
</div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;subproof&quot;" data-shell_title="">
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume V&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span><br><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W&quot;" data-metadata_latex="&quot;W&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span></p>
</div>
</div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>or+</strong></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span><br><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W or V&quot;" data-metadata_latex="&quot; W\\text{ or } V&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__text"> or </span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span><br><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;V or W&quot;" data-metadata_latex="&quot; V\\text{ or } W&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.23em;">V</span><span class="ML__text"> or </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span></p>
</div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>or- (proof by cases)</strong></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume W or V&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__text"> or </span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span><br><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume W implies U&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__cmr">⇒</span><span class="ML__mathit" style="margin-right: 0.11em;">U</span></span></span></span></span><br><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume V implies U&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.23em;">V</span><span class="ML__cmr">⇒</span><span class="ML__mathit" style="margin-right: 0.11em;">U</span></span></span></span></span><br><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;U&quot;" data-metadata_latex="&quot;U&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.11em;">U</span></span></span></span></span>&nbsp;</p>
</div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>not+ (proof by contradiction)</strong></p>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;premise&quot;" data-shell_title="">
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span><br><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;contradiction&quot;" data-metadata_latex="&quot;\\rightarrow\\leftarrow&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">→←</span></span></span></span></span></p>
</div>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;not W&quot;" data-metadata_latex="&quot;\\neg W&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__ams">¬</span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span></p>
</div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>not- (proof by contradiction)</strong></p>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;premise&quot;" data-shell_title="">
<p>&nbsp;<span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume not W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__ams">¬</span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span><br><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;contradiction&quot;" data-metadata_latex="&quot;\\rightarrow\\leftarrow&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">→←</span></span></span></span></span></p>
</div>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W&quot;" data-metadata_latex="&quot;W&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span></p>
</div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>contradiction+</strong></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span><br><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume not W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__ams">¬</span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;contradiction&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">→←</span></span></span></span></span></p>
</div>
<hr>
<h1>Predicate Logic with Equality</h1>
<p>This is a basic library of the rules that define a natural deduction style formal system for Predicate Logic with equality.&nbsp;</p>
<hr>
<div>
<h3>Constants</h3>
<div><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Declare ∀, ∃, ∃!, =&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Declare </span><span class="ML__cmr">∀</span><span class="ML__text">, </span><span class="ML__cmr">∃</span><span class="ML__text">, </span><span class="ML__cmr">∃!</span><span class="ML__text">, and </span><span class="ML__cmr">=</span></span></span></span></span> to be constants.</div>
<h3>Quantifier Rules</h3>
<div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;">forall+</strong></p>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;premise&quot;" data-shell_title="">
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Let z&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Let </span><span class="ML__mathit" style="margin-right: 0.05em;">z</span></span></span></span></span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;(a variable declaration)&nbsp;</p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;𝜆P(z)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.05em;">z</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
</div>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;forall x.𝜆P(x)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">∀</span><span class="ML__mathit">x</span><span class="ML__cmr">.</span><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">x</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span>&nbsp;</p>
</div>
</div>
<div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>forall-</strong></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume forall x.𝜆P(x)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__cmr">∀</span><span class="ML__mathit">x</span><span class="ML__cmr">.</span><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">x</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;𝜆P(t)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.61508em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">t</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
</div>
</div>
<div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>exists+</strong></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume 𝜆P(t)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.61508em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">t</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;exists x.𝜆P(x)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">∃</span><span class="ML__mathit">x</span><span class="ML__cmr">.</span><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">x</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
</div>
</div>
<div>
<div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>exists-</strong></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume exists x.𝜆P(x)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__cmr">∃</span><span class="ML__mathit">x</span><span class="ML__cmr">.</span><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">x</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;𝜆P(c) for some c&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">c</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__text"> for some </span><span class="ML__mathit">c</span></span></span></span></span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (constant declaration)</p>
</div>
<h3>Equality</h3>
</div>
</div>
<div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>reflexivity&nbsp; &nbsp;</strong><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W=W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__cmr">=</span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span></p>
</div>
</div>
<div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>substitution</strong></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume w=v&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.03em;">w</span><span class="ML__cmr">=</span><span class="ML__mathit" style="margin-right: 0.04em;">v</span></span></span></span></span></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume 𝜆P(w)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.03em;">w</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;𝜆P(v)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.04em;">v</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span>&nbsp;</p>
</div>
</div>
<h3>Unique Existence</h3>
<div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>unique existence-</strong></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume ∃!x.𝜆P(x)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__cmr">∃!</span><span class="ML__mathit">x</span><span class="ML__cmr">.</span><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">x</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;𝜆P(c) and (forall y.(𝜆P(y) implies y=c)) for some c&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">c</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__text"> and </span><span class="ML__left-right" style="margin-top: -0.25em; height: 1em;"><span class="ML__small-delim ML__open">(</span><span class="ML__cmr">∀</span><span class="ML__mathit" style="margin-right: 0.04em;">y</span><span class="ML__cmr">.</span><span class="ML__left-right" style="margin-top: -0.25em; height: 1em;"><span class="ML__small-delim ML__open">(</span><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: -0.19444em; height: 0.625em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.04em;">y</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">⇒</span><span class="ML__mathit" style="margin-right: 0.04em;">y</span><span class="ML__cmr">=</span><span class="ML__mathit">c</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__small-delim ML__close">)</span></span><span class="ML__text"> for some </span><span class="ML__mathit">c</span></span></span></span></span></p>
</div>
</div>
<div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>unique existence+</strong></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume 𝜆P(t)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.61508em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">t</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;premise&quot;" data-shell_title="">
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Let y be such that 𝜆P(y)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Let </span><span class="ML__mathit" style="margin-right: 0.04em;">y</span><span class="ML__text"> be such that </span><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: -0.19444em; height: 0.625em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.04em;">y</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;y=t&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.04em;">y</span><span class="ML__cmr">=</span><span class="ML__mathit">t</span></span></span></span></span></p>
</div>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;∃!x.𝜆P(x)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">∃!</span><span class="ML__mathit">x</span><span class="ML__cmr">.</span><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">x</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span>&nbsp;</p>
</div>
<hr>
<div>
<h1>Logic Theorems</h1>
<p>This is a basic library of the rules that are theorems provable in the system defined by the rules in the Predicate Logic with Equality library.</p>
<hr>
<h3>Constants</h3>
<p>No additional constants required.</p>
<h3>Theorems (as rules)</h3>
<div>
<div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>excluded middle</strong></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W or not W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__text"> or </span><span class="ML__ams">¬</span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span></p>
</div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>double negative</strong></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;not (not W) ≡ W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__ams">¬</span><span class="ML__left-right" style="margin-top: -0.2em; height: 0.8999999999999999em;"><span class="ML__small-delim ML__open">(</span><span class="ML__ams">¬</span><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">≡</span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span></p>
</div>
</div>
<div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>commutativity of 'or'</strong></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume W or V &quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__text"> or </span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;V or W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.23em;">V</span><span class="ML__text"> or </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span></p>
</div>
</div>
<div>
<div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>associativity of 'or'</strong></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;(W or V) or U ≡ W or (V or U)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__left-right" style="margin-top: 0em; height: 0.68333em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__text"> or </span><span class="ML__mathit" style="margin-right: 0.23em;">V</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__text"> or </span><span class="ML__mathit" style="margin-right: 0.11em;">U</span><span class="ML__cmr">≡</span><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__text"> or </span><span class="ML__left-right" style="margin-top: 0em; height: 0.68333em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.23em;">V</span><span class="ML__text"> or </span><span class="ML__mathit" style="margin-right: 0.11em;">U</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
</div>
</div>
</div>
<div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>alternate definition of 'implies'</strong></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W implies V ≡ not W or V&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__cmr">⇒</span><span class="ML__mathit" style="margin-right: 0.23em;">V</span><span class="ML__cmr">≡</span><span class="ML__ams">¬</span><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__text"> or </span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
</div>
</div>
<div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>alternate or-</strong></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume W or V&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__text"> or </span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume not W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__ams">¬</span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;V&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
</div>
</div>
<div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>alternate or-</strong></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume W or V&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__text"> or </span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume not V&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__ams">¬</span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span></p>
</div>
</div>
<div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>negated implication</strong></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;not (W implies V)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__ams">¬</span><span class="ML__left-right" style="margin-top: 0em; height: 0.68333em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__cmr">⇒</span><span class="ML__mathit" style="margin-right: 0.23em;">V</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span> &nbsp;<span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;≡&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">≡</span></span></span></span></span>&nbsp; <span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span> and&nbsp; <span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;not V&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__ams">¬</span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
</div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>contrapositive</strong></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W implies V &quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__cmr">⇒</span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span> &nbsp;<span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;≡ &quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">≡</span></span></span></span></span> &nbsp;<span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;not V implies not W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__ams">¬</span><span class="ML__mathit" style="margin-right: 0.23em;">V</span><span class="ML__cmr">⇒</span><span class="ML__ams">¬</span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span></p>
</div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>DeMorgan's Law</strong></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;not (W and V) ≡ not W or not V&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__ams">¬</span><span class="ML__left-right" style="margin-top: 0em; height: 0.69444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__text"> and </span><span class="ML__mathit" style="margin-right: 0.23em;">V</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">≡</span><span class="ML__ams">¬</span><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__text"> or </span><span class="ML__ams">¬</span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
</div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>DeMorgan's Law</strong></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;not (W or V) ≡ not W and not V&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__ams">¬</span><span class="ML__left-right" style="margin-top: 0em; height: 0.68333em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__text"> or </span><span class="ML__mathit" style="margin-right: 0.23em;">V</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">≡</span><span class="ML__ams">¬</span><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__text"> and </span><span class="ML__ams">¬</span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
</div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Anything follows from a contradiction</strong></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume contradiction&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__cmr">→←</span></span></span></span></span>&nbsp;</p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span></p>
</div>
</div>
</div>
<hr>
<h1>Peano Axioms</h1>
<div>This is a library containing the Peano Axioms. They define a formal system for the Natural Numbers.&nbsp; This library includes all of the rules, definitions, and axioms from the Logic-Theorems library.</div>
<hr>
<h3>Constants</h3>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Declare 0, sigma, +, ⋅, ≤&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Declare </span><span class="ML__cmr">0</span><span class="ML__text">, </span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">σ</span><span class="ML__text">, </span><span class="ML__cmr">+</span><span class="ML__text">, </span><span class="ML__cmr">⋅</span><span class="ML__text">, and </span><span class="ML__cmr">≤</span></span></span></span></span></p>
<h3>Peano Axioms</h3>
<h4><strong>The set ℕ</strong></h4>
<p>&nbsp; &nbsp; We don't need axioms N0 or N1.</p>
<p>&nbsp; &nbsp; <strong>N0:</strong> <span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;0&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">0</span></span></span></span></span> is a natural number.</p>
<p>&nbsp; &nbsp; <strong>N1:</strong> For all natural numbers&nbsp;<span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;n&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">n</span></span></span></span></span>, the successor of <span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;n&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">n</span></span></span></span></span> is a natural number.</p>
<div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>N2 (successor is injective)</strong></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume sigma(m)=sigma(n)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">σ</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">m</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">=</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">σ</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;m=n&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">m</span><span class="ML__cmr">=</span><span class="ML__mathit">n</span></span></span></span></span></p>
</div>
</div>
<div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>N3 (zero is first)</strong></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;0 neq sigma(n)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">0</span><span class="ML__rlap"><span class="ML__inner"><span class="ML__cmr"></span></span></span><span class="ML__cmr">=</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">σ</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
</div>
</div>
<div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>N4 (induction)</strong></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume 𝜆P(0)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.64444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__cmr">0</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;premise&quot;" data-shell_title="">
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Let k be such that 𝜆P(k)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Let </span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__text"> be such that </span><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.69444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;𝜆P(sigma(k))&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: -0.25em; height: 1em;"><span class="ML__small-delim ML__open">(</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">σ</span><span class="ML__left-right" style="margin-top: 0em; height: 0.69444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
</div>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;forall n.𝜆P(n)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">∀</span><span class="ML__mathit">n</span><span class="ML__cmr">.</span><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
</div>
</div>
<div><strong>Addition</strong></div>
<div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>A0:&nbsp; &nbsp; </strong><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;n+0=n&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">n</span><span class="ML__cmr">+</span><span class="ML__cmr">0</span><span class="ML__cmr">=</span><span class="ML__mathit">n</span></span></span></span></span></p>
</div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>A1:&nbsp; &nbsp;&nbsp;</strong><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;m+sigma(n)=sigma(m+n)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">m</span><span class="ML__cmr">+</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">σ</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">=</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">σ</span><span class="ML__left-right" style="margin-top: -0.08333em; height: 0.66666em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">m</span><span class="ML__cmr">+</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
</div>
</div>
<div><strong>Multiplication</strong></div>
<div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>M0: &nbsp;</strong><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;n*0=0&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">n</span><span class="ML__cmr">⋅</span><span class="ML__cmr">0</span><span class="ML__cmr">=</span><span class="ML__cmr">0</span></span></span></span></span></p>
</div>
</div>
<div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>M1: &nbsp;</strong><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;m*sigma(n) = m+m*n&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">m</span><span class="ML__cmr">⋅</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">σ</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">=</span><span class="ML__mathit">m</span><span class="ML__cmr">+</span><span class="ML__mathit">m</span><span class="ML__cmr">⋅</span><span class="ML__mathit">n</span></span></span></span></span></p>
</div>
</div>
<div><strong>Order</strong></div>
<div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>I: &nbsp;</strong><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;m leq n ≡ exists k.m+k=n&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">m</span><span class="ML__cmr">≤</span><span class="ML__mathit">n</span><span class="ML__cmr">≡</span><span class="ML__cmr">∃</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__cmr">.</span><span class="ML__mathit">m</span><span class="ML__cmr">+</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__cmr">=</span><span class="ML__mathit">n</span></span></span></span></span></p>
</div>
<hr></div>
</div>
</div>
</div>
<h1>Number Theory</h1>
<p>This library contains some definitions from Number Theory.&nbsp; It includes all of the rules in the Peano Axioms library.</p>
<hr>
<h3>Constants</h3>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Declare 1, 2, 3, 4, 5, is, |, prime, even, odd&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Declare </span><span class="ML__cmr">1</span><span class="ML__text">, </span><span class="ML__cmr">2</span><span class="ML__text">, </span><span class="ML__cmr">3</span><span class="ML__text">, </span><span class="ML__cmr">4</span><span class="ML__text">, </span><span class="ML__cmr">5</span><span class="ML__text">, is, </span><span class="ML__cmr">∣</span><span class="ML__text">, prime, even, and odd</span></span></span></span></span></p>
<h3>Definitions</h3>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Base ten digits</strong><br><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;1=sigma(0)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">1</span><span class="ML__cmr">=</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">σ</span><span class="ML__left-right" style="margin-top: 0em; height: 0.64444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__cmr">0</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;2=sigma(1)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">2</span><span class="ML__cmr">=</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">σ</span><span class="ML__left-right" style="margin-top: 0em; height: 0.64444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__cmr">1</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;3=sigma(2)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">3</span><span class="ML__cmr">=</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">σ</span><span class="ML__left-right" style="margin-top: 0em; height: 0.64444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__cmr">2</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;4=sigma(3)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">4</span><span class="ML__cmr">=</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">σ</span><span class="ML__left-right" style="margin-top: 0em; height: 0.64444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__cmr">3</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;5=sigma(5)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">5</span><span class="ML__cmr">=</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">σ</span><span class="ML__left-right" style="margin-top: 0em; height: 0.64444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__cmr">5</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
</div>
<div>
<div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Divides:&nbsp; &nbsp;</strong><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;m|n ≡ exists k.n=m*k&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">m</span><span class="ML__cmr">∣</span><span class="ML__mathit">n</span><span class="ML__cmr">≡</span><span class="ML__cmr">∃</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__cmr">.</span><span class="ML__mathit">n</span><span class="ML__cmr">=</span><span class="ML__mathit">m</span><span class="ML__cmr">⋅</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span></span></span></span></span></p>
</div>
</div>
<div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Prime: &nbsp;</strong><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;n is prime&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">n</span><span class="ML__text"> is prime</span></span></span></span></span>&nbsp; &nbsp;<span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;≡&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">≡</span></span></span></span></span>&nbsp; <span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;1<n&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">1</span><span class="ML__cmr">&lt;</span><span class="ML__mathit">n</span></span></span></span></span>&nbsp; and &nbsp;<span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;not (exists k.(1<k and k<n) and k|n)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__ams">¬</span><span class="ML__left-right" style="margin-top: -0.25em; height: 1em;"><span class="ML__small-delim ML__open">(</span><span class="ML__cmr">∃</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__cmr">.</span><span class="ML__left-right" style="margin-top: -0.0391em; height: 0.73354em;"><span class="ML__small-delim ML__open">(</span><span class="ML__cmr">1</span><span class="ML__cmr">&lt;</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__text"> and </span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__cmr">&lt;</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__text"> and </span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__cmr">∣</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
</div>
</div>
<div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Even:</strong> &nbsp;<span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;If n is even &quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">If </span><span class="ML__mathit">n</span><span class="ML__text"> is even</span></span></span></span></span> then <span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;n=2*m for some m&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">n</span><span class="ML__cmr">=</span><span class="ML__cmr">2</span><span class="ML__cmr">⋅</span><span class="ML__mathit">m</span><span class="ML__text"> for some </span><span class="ML__mathit">m</span></span></span></span></span>.&nbsp;</p>
</div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Even: </strong><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;If n=2*m&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">If </span><span class="ML__mathit">n</span><span class="ML__cmr">=</span><span class="ML__cmr">2</span><span class="ML__cmr">⋅</span><span class="ML__mathit">m</span></span></span></span></span> then <span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;n is even&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">n</span><span class="ML__text"> is even</span></span></span></span></span>.</p>
</div>
</div>
<div>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Odd:&nbsp;</strong><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;n is odd ≡ not n is even&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">n</span><span class="ML__text"> is odd</span><span class="ML__cmr">≡</span><span class="ML__ams">¬</span><span class="ML__mathit">n</span><span class="ML__text"> is even</span></span></span></span></span></p>
</div>
<hr></div>
</div>
<h1>Equations</h1>
<p>The Equations Rule is a special built-in validation tool that Lurch provides for dealing with proofs involving lengthy transitive chains of equations, such as&nbsp;</p>
<p>&nbsp;</p>
<p style="text-align: center;"><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;\\begin{align*} a &amp;= b \\\\ &amp;=c \\\\ &amp;=d&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mtable"><span class="col-align-r"><span class="ML__vlist-t ML__vlist-t2"><span class="ML__vlist-r"><span class="ML__vlist" style="height: 2.36em;"><span style="top: -4.51em;"><span style="height: 1.5em; display: inline-block;"><span class="ML__mathit">a</span></span></span></span><span class="ML__vlist-s">​</span></span></span></span><span class="col-align-l"><span class="ML__vlist-t ML__vlist-t2"><span class="ML__vlist-r"><span class="ML__vlist" style="height: 2.36em;"><span style="top: -4.51em;"><span style="height: 1.5em; display: inline-block;"><span class="ML__cmr">=</span><span class="ML__mathit">b</span></span></span><span style="top: -3.01em;"><span style="height: 1.5em; display: inline-block;"><span class="ML__cmr">=</span><span class="ML__mathit">c</span></span></span><span style="top: -1.51em;"><span style="height: 1.2em; display: inline-block;"><span class="ML__cmr">=</span><span class="ML__mathit">d</span></span></span></span><span class="ML__vlist-s">​</span></span></span></span></span></span></span></span></span></p>
<p style="text-align: left;">&nbsp;</p>
<p style="text-align: left;">(entered as&nbsp;<code>a=b=c=d</code>).&nbsp; It automates the application of the substitution and reflexive rules of equality, its derived properties of symmetry and transitivity, and checks each pair in the chain for both direct equality, and equality via a single substitution.&nbsp; This topic includes everything from the Number Theory topic.</p>
<div class="lurch-atom atom-is-selected" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Equations Rule:</strong> &nbsp; <span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;EquationsRule&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">EquationsRule</span></span></span></span></span></p>
</div>
<hr>
<p>&nbsp;</p><div class="lurch-atom" contenteditable="false" data-metadata_type="&quot;dependency&quot;" data-metadata_description="&quot;none&quot;" data-metadata_filename="&quot;math/Sequences-Rules.lurch&quot;" data-metadata_source="&quot;web&quot;" data-metadata_content="&quot;&quot;" data-metadata_auto-refresh="true" style="border: 1px solid gray; padding: 0px 1em;"><div class="lurch-atom-metadata" style="display: none;"><div data-key="content">
            <div id="loadlink">
                <p><a>Open this file in the Lurch web app</a></p>
                
            </div>
        
            <div id="metadata" style="display: none;"><div data-category="settings" data-key="shell style" data-value-type="json">"boxed"</div><div data-category="main" data-key="header" data-value-type="html"><div class="lurch-atom" contenteditable="false" data-metadata_type="&quot;dependency&quot;" data-metadata_description="&quot;none&quot;" data-metadata_filename="&quot;math/Number-theory-theorems-Rules.lurch&quot;" data-metadata_source="&quot;web&quot;" data-metadata_content="&quot;&quot;" data-metadata_auto-refresh="true" style="border: 1px solid gray; padding: 0px 1em;"><div class="lurch-atom-metadata" style="display: none;"><div data-key="content">
            <div id="loadlink">
                <p><a>Open this file in the Lurch web app</a></p>
                
            </div>
        
            <div id="metadata" style="display: none;"><div data-category="settings" data-key="shell style" data-value-type="json">"boxed"</div><div data-category="main" data-key="header" data-value-type="html"><div class="lurch-atom" contenteditable="false" data-metadata_type="&quot;dependency&quot;" data-metadata_description="&quot;none&quot;" data-metadata_filename="&quot;math/Equations-Rules.lurch&quot;" data-metadata_source="&quot;web&quot;" data-metadata_content="&quot;&quot;" data-metadata_auto-refresh="true" style="border: 1px solid gray; padding: 0px 1em;"><div class="lurch-atom-metadata" style="display: none;"><div data-key="content">
            <div id="loadlink">
                <p><a>Open this file in the Lurch web app</a></p>
                
            </div>
        
            <div id="metadata" style="display: none;"><div data-category="settings" data-key="shell style" data-value-type="json">"boxed"</div><div data-category="main" data-key="header" data-value-type="html"><div class="lurch-atom" contenteditable="false" data-metadata_type="&quot;dependency&quot;" data-metadata_description="&quot;none&quot;" data-metadata_filename="&quot;math/Number-theory-Rules.lurch&quot;" data-metadata_source="&quot;web&quot;" data-metadata_content="&quot;&quot;" data-metadata_auto-refresh="true" style="border: 1px solid gray; padding: 0px 1em;"><div class="lurch-atom-metadata" style="display: none;"><div data-key="content">
            <div id="loadlink">
                <p><a>Open this file in the Lurch web app</a></p>
                
            </div>
        
            <div id="metadata" style="display: none;"><div data-category="settings" data-key="shell style" data-value-type="json">"boxed"</div><div data-category="main" data-key="header" data-value-type="html"><div class="lurch-atom" contenteditable="false" data-metadata_type="&quot;dependency&quot;" data-metadata_description="&quot;none&quot;" data-metadata_filename="&quot;math/Peano-Rules.lurch&quot;" data-metadata_source="&quot;web&quot;" data-metadata_content="&quot;&quot;" data-metadata_auto-refresh="true" style="border: 1px solid gray; padding: 0px 1em;"><div class="lurch-atom-metadata" style="display: none;"><div data-key="content">
            <div id="loadlink">
                <p><a>Open this file in the Lurch web app</a></p>
                
            </div>
        
            <div id="metadata" style="display: none;"><div data-category="settings" data-key="shell style" data-value-type="json">"boxed"</div><div data-category="main" data-key="header" data-value-type="html"><div class="lurch-atom" contenteditable="false" data-metadata_type="&quot;dependency&quot;" data-metadata_description="&quot;none&quot;" data-metadata_filename="&quot;math/Logic-theorems-Rules.lurch&quot;" data-metadata_source="&quot;web&quot;" data-metadata_content="&quot;&quot;" data-metadata_auto-refresh="true" style="border: 1px solid gray; padding: 0px 1em;"><div class="lurch-atom-metadata" style="display: none;"><div data-key="content">
            <div id="loadlink">
                <p><a>Open this file in the Lurch web app</a></p>
                
            </div>
        
            <div id="metadata" style="display: none;"><div data-category="settings" data-key="shell style" data-value-type="json">"boxed"</div><div data-category="main" data-key="header" data-value-type="html"><div class="lurch-atom" contenteditable="false" data-metadata_type="&quot;dependency&quot;" data-metadata_description="&quot;none&quot;" data-metadata_filename="&quot;math/Pred-Rules.lurch&quot;" data-metadata_source="&quot;the web&quot;" data-metadata_auto-refresh="true" style="border: 1px solid gray; padding: 0px 1em;"><div class="lurch-atom-metadata" style="display: none;"><div data-key="content">
            <div id="loadlink">
                <p><a>Open this file in the Lurch web app</a></p>
                
            </div>
        
            <div id="metadata" style="display: none;"><div data-category="settings" data-key="shell style" data-value-type="json">"boxed"</div><div data-category="main" data-key="header" data-value-type="html"><div class="lurch-atom" contenteditable="false" data-metadata_type="&quot;dependency&quot;" data-metadata_description="&quot;none&quot;" data-metadata_filename="&quot;math/Prop-Rules.lurch&quot;" data-metadata_source="&quot;the web&quot;" data-metadata_auto-refresh="true" style="border: 1px solid gray; padding: 0px 1em;"><div class="lurch-atom-metadata" style="display: none;"><div data-key="content">
            <div id="loadlink">
                <p><a>Open this file in the Lurch web app</a></p>
                
            </div>
        
            <div id="metadata" style="display: none;"><div data-category="main" data-key="header" data-value-type="html"><div class="lurch-atom" contenteditable="false" data-metadata_type="&quot;dependency&quot;" data-metadata_description="&quot;none&quot;" data-metadata_filename="&quot;math/Intro.lurch&quot;" data-metadata_source="&quot;the web&quot;" data-metadata_auto-refresh="true" style="border: 1px solid gray; padding: 0px 1em;"><div class="lurch-atom-metadata" style="display: none;"><div data-key="content">
            <div id="loadlink">
                <p><a>Open this file in the Lurch web app</a></p>
                
            </div>
        
            <div id="metadata" style="display: none;"></div>
            <div id="document"><h1>Math 299 Rules, Definitions, and Theorems</h1>
<h3>Ken Monks - University of Scranton -&nbsp;Spring 2024</h3>
<p>Welcome to Math 299.&nbsp; Below you will find some of the rules, definitions, theorems, and declarations that we use in the course.&nbsp; For more detail about these rules see the Course Lecture Notes on the Math 299 Home Page accessible via the Lurch <code>Help</code> menu at the top of the page.&nbsp; (<em>Note that some of the definitions below differ from what is in the lecture notes as they are still in the process of being updated to be consistent with the rules below</em>.)</p>
<p>There are many ways to write the same definition, theorem, or rule in Lurch.&nbsp; For consistency most of the rules below use the same style that imitates the <em>Given-Conclude</em> format used in many high school geometry textbooks.</p>
<p>&nbsp;</p></div>
        </div></div><div class="lurch-atom-body"><table><colgroup><col><col></colgroup><tbody><tr><td colspan="2"><b>Imported dependency document</b></td></tr><tr><td>Description:</td><td><tt>none</tt></td></tr><tr><td>Filename:</td><td><tt>math/Intro.lurch</tt></td></tr><tr><td>Source:</td><td>the web</td></tr><tr><td>Auto-refresh:</td><td>yes</td></tr></tbody></table></div></div></div><div data-category="settings" data-key="shell style" data-value-type="json">"boxed"</div></div>
            <div id="document"><h1>Propositional Logic</h1>
<p>This is a basic library of the rules that define a natural deduction style formal system for Propositional Logic. Rule premises are denoted as 'Given' and conclusions by 'Conclude'.</p>
<hr>
<h3><strong>Constants</strong></h3>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Declare iff, and, implies, or, not, contradiction&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Declare </span><span class="ML__cmr">⇔</span><span class="ML__text">, and, </span><span class="ML__cmr">⇒</span><span class="ML__text">, or, </span><span class="ML__ams">¬</span><span class="ML__text">, and </span><span class="ML__cmr">→←</span></span></span></span></span> to be constants.</p>
<h3><strong>Definitions</strong></h3>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p style="text-align: left;"><strong>and+</strong></p>
<div class="lurch-atom" data-metadata_type="&quot;premise&quot;" data-shell_title="">
<p><em>Given</em></p>
<p><em><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span></em></p>
<p><em><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;V&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></em></p>
</div>
<p style="text-align: left;"><em>Conclude</em>&nbsp;<span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W and V&quot;" data-metadata_latex="&quot; W\\text{ and } V&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__text"> and </span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
</div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>and-</strong></p>
<div class="lurch-atom" data-metadata_type="&quot;premise&quot;" data-shell_title="">
<p><em>Given</em></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W and V&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__text"> and </span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
</div>
<p><em>Conclude </em><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W&quot;" data-metadata_latex="&quot;W&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span><br>Conclude <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;V&quot;" data-metadata_latex="&quot;V&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
</div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>implies+</strong></p>
<div class="lurch-atom" data-metadata_type="&quot;premise&quot;" data-shell_title="">
<p><em>Given</em></p>
<div class="lurch-atom" data-metadata_type="&quot;subproof&quot;" data-shell_title="">
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;V&quot;" data-metadata_latex="&quot;V&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
</div>
</div>
<p><em>Conclude</em> <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W implies V&quot;" data-metadata_latex="&quot; W\\Rightarrow V&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__cmr">⇒</span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
</div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>implies- (modus ponens)</strong></p>
<div class="lurch-atom" data-metadata_type="&quot;premise&quot;" data-shell_title="">
<p><em>Given</em></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W implies V&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__cmr">⇒</span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span></p>
</div>
<p>Conclude <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;V&quot;" data-metadata_latex="&quot;V&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
</div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>iff+</strong></p>
<div class="lurch-atom" data-metadata_type="&quot;premise&quot;" data-shell_title="">
<p><em>Given</em></p>
<div class="lurch-atom" data-metadata_type="&quot;subproof&quot;" data-shell_title="">
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span><br><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;V&quot;" data-metadata_latex="&quot;V&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
</div>
<div class="lurch-atom" data-metadata_type="&quot;subproof&quot;" data-shell_title="">
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume V&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span><br><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W&quot;" data-metadata_latex="&quot;W&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span></p>
</div>
</div>
<p>Conclude&nbsp;<span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W iff V&quot;" data-metadata_latex="&quot; W\\Leftrightarrow V&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__cmr">⇔</span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
</div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>iff- (1 of 2)</strong></p>
<div class="lurch-atom" data-metadata_type="&quot;premise&quot;" data-shell_title="">
<p><em>Given</em></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W iff V&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__cmr">⇔</span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span></p>
</div>
<p>Conclude <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;V&quot;" data-metadata_latex="&quot;V&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
</div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>iff- (2 of 2)</strong></p>
<div class="lurch-atom" data-metadata_type="&quot;premise&quot;" data-shell_title="">
<p><em>Given</em></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W iff V&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__cmr">⇔</span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;V&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
</div>
<p>Conclude <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span></p>
</div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>or+</strong></p>
<div class="lurch-atom" data-metadata_type="&quot;premise&quot;" data-shell_title="">
<p><em>Given</em></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span></p>
</div>
<p>Conclude <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W or V&quot;" data-metadata_latex="&quot; W\\text{ or } V&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__text"> or </span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
<p>Conclude <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;V or W&quot;" data-metadata_latex="&quot; V\\text{ or } W&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.23em;">V</span><span class="ML__text"> or </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span></p>
</div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>or- (proof by cases)</strong></p>
<div class="lurch-atom" data-metadata_type="&quot;premise&quot;" data-shell_title="">
<p><em>Given</em></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W or V&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__text"> or </span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W implies U&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__cmr">⇒</span><span class="ML__mathit" style="margin-right: 0.11em;">U</span></span></span></span></span></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;V implies U&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.23em;">V</span><span class="ML__cmr">⇒</span><span class="ML__mathit" style="margin-right: 0.11em;">U</span></span></span></span></span></p>
</div>
<p>Conclude <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;U&quot;" data-metadata_latex="&quot;U&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.11em;">U</span></span></span></span></span>&nbsp;</p>
</div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>not+ (proof by contradiction)</strong></p>
<div class="lurch-atom" data-metadata_type="&quot;premise&quot;" data-shell_title="">
<p><em>Given</em></p>
<div class="lurch-atom" data-metadata_type="&quot;subproof&quot;" data-shell_title="">
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;contradiction&quot;" data-metadata_latex="&quot;\\rightarrow\\leftarrow&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">→←</span></span></span></span></span></p>
</div>
</div>
<p>Conclude <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;not W&quot;" data-metadata_latex="&quot;\\neg W&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">not </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span></p>
</div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>not- (proof by contradiction)</strong></p>
<div class="lurch-atom" data-metadata_type="&quot;premise&quot;" data-shell_title="">
<p><em>Given</em></p>
<div class="lurch-atom" data-metadata_type="&quot;subproof&quot;" data-shell_title="">
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Assume not W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Assume not </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;contradiction&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">→←</span></span></span></span></span></p>
</div>
</div>
<p>&nbsp;Conclude <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W&quot;" data-metadata_latex="&quot;W&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span></p>
</div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>contradiction+</strong></p>
<div class="lurch-atom" data-metadata_type="&quot;premise&quot;" data-shell_title="">
<p><em>Given</em></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;not W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">not </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span></p>
</div>
<p>Conclude&nbsp;<span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;→←&quot;" data-metadata_latex="&quot;\\rightarrow\\leftarrow&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">→←</span></span></span></span></span></p>
</div>
<hr>
<p>&nbsp;</p></div>
        </div></div><div class="lurch-atom-body"><table><colgroup><col><col></colgroup><tbody><tr><td colspan="2"><b>Imported dependency document</b></td></tr><tr><td>Description:</td><td><tt>none</tt></td></tr><tr><td>Filename:</td><td><tt>math/Prop-Rules.lurch</tt></td></tr><tr><td>Source:</td><td>the web</td></tr><tr><td>Auto-refresh:</td><td>yes</td></tr></tbody></table></div></div></div></div>
            <div id="document"><h1>Predicate Logic with Equality</h1>
<p>This is a basic library of the rules that define a natural deduction style formal system for Predicate Logic with equality.&nbsp; All of the rules from the Propositional Logic library are also available.</p>
<hr>
<div>
<h3>Constants</h3>
<div><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Declare forall, exists, exists!, =&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Declare </span><span class="ML__cmr">∀</span><span class="ML__text">, </span><span class="ML__cmr">∃</span><span class="ML__text">, </span><span class="ML__cmr">∃!</span><span class="ML__text">, and </span><span class="ML__cmr">=</span></span></span></span></span> to be constants.</div>
<h3>Quantifier Rules</h3>
<div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;">forall+</strong></p>
<div class="lurch-atom" data-metadata_type="&quot;premise&quot;" data-shell_title="">
<p><em>Given</em></p>
<div class="lurch-atom" data-metadata_type="&quot;subproof&quot;" data-shell_title="">
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Let z&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Let </span><span class="ML__mathit" style="margin-right: 0.05em;">z</span></span></span></span></span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;(a variable declaration)</p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;𝜆P(z)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.05em;">z</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
</div>
</div>
<p><em>Conclude</em> <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;forall x.𝜆P(x)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">∀</span><span class="ML__mathit">x</span><span class="ML__cmr">.</span><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">x</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span>&nbsp;</p>
</div>
</div>
<div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>forall-</strong></p>
<div class="lurch-atom" data-metadata_type="&quot;premise&quot;" data-shell_title="">
<p><em>Given</em></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;forall x.𝜆P(x)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">∀</span><span class="ML__mathit">x</span><span class="ML__cmr">.</span><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">x</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
</div>
<p><em>Conclude</em>&nbsp;<span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;𝜆P(t)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.61508em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">t</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
</div>
</div>
<div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>exists+</strong></p>
<div class="lurch-atom" data-metadata_type="&quot;premise&quot;" data-shell_title="">
<p><em>Given</em></p>
<p><em><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;𝜆P(t)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.61508em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">t</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></em></p>
</div>
<p><em>Conclude</em>&nbsp;<span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;exists x.𝜆P(x)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">∃</span><span class="ML__mathit">x</span><span class="ML__cmr">.</span><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">x</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
</div>
</div>
<div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>exists-</strong></p>
<div class="lurch-atom" data-metadata_type="&quot;premise&quot;" data-shell_title="">
<p><em>Given</em></p>
<p><em><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;exists x.𝜆P(x)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">∃</span><span class="ML__mathit">x</span><span class="ML__cmr">.</span><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">x</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></em></p>
</div>
<p><em>Conclude</em> <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;𝜆P(c) for some c&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">c</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__text"> for some </span><span class="ML__mathit">c</span></span></span></span></span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (constant declaration)</p>
</div>
<h3>Equality</h3>
</div>
<div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>reflexivity&nbsp; &nbsp;</strong><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W=W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__cmr">=</span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span></p>
</div>
</div>
<div>
<p><strong><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;SubsRule&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Substitution </span></span></span></span></span>Rule&nbsp;</strong></p>
<p>Note: For efficiency, most documents will not use this rule unless you explicitly say 'by substitution' in a meaningful expression after the statement you are trying to justify.</p>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Substitution</strong></p>
<div class="lurch-atom" data-metadata_type="&quot;premise&quot;" data-shell_title="">
<p><em>Given</em></p>
<p><em><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;w=v&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.03em;">w</span><span class="ML__cmr">=</span><span class="ML__mathit" style="margin-right: 0.04em;">v</span></span></span></span></span></em></p>
<p><em><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;𝜆P(w)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.03em;">w</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></em></p>
</div>
<p><em>Conclude</em>&nbsp;<span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;𝜆P(v)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.04em;">v</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span>&nbsp;</p>
</div>
</div>
<h3>Unique Existence</h3>
<div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>unique existence-</strong></p>
<div class="lurch-atom" data-metadata_type="&quot;premise&quot;" data-shell_title="">
<p><em>Given</em></p>
<p><em><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;exists!x.𝜆P(x)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">∃!</span><span class="ML__mathit">x</span><span class="ML__cmr">.</span><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">x</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></em></p>
</div>
<p><em>Conclude</em> <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;𝜆P(c) and (forall y.(𝜆P(y) implies y=c)) for some c&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">c</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__text"> and </span><span class="ML__left-right" style="margin-top: -0.25em; height: 1em;"><span class="ML__small-delim ML__open">(</span><span class="ML__cmr">∀</span><span class="ML__mathit" style="margin-right: 0.04em;">y</span><span class="ML__cmr">.</span><span class="ML__left-right" style="margin-top: -0.25em; height: 1em;"><span class="ML__small-delim ML__open">(</span><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: -0.19444em; height: 0.625em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.04em;">y</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">⇒</span><span class="ML__mathit" style="margin-right: 0.04em;">y</span><span class="ML__cmr">=</span><span class="ML__mathit">c</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__small-delim ML__close">)</span></span><span class="ML__text"> for some </span><span class="ML__mathit">c</span></span></span></span></span></p>
</div>
</div>
<div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>unique existence+</strong></p>
<div class="lurch-atom" data-metadata_type="&quot;premise&quot;" data-shell_title="">
<p><em>Given</em></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;𝜆P(t)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.61508em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">t</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
<div class="lurch-atom" data-metadata_type="&quot;subproof&quot;" data-shell_title="">
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Let y be such that 𝜆P(y)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Let </span><span class="ML__mathit" style="margin-right: 0.04em;">y</span><span class="ML__text"> be such that </span><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: -0.19444em; height: 0.625em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.04em;">y</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;y=t&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.04em;">y</span><span class="ML__cmr">=</span><span class="ML__mathit">t</span></span></span></span></span></p>
</div>
</div>
<p><em>Conclude</em> <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;exists!x.𝜆P(x)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">∃!</span><span class="ML__mathit">x</span><span class="ML__cmr">.</span><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">x</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span>&nbsp;</p>
</div>
<hr></div>
</div></div>
        </div></div><div class="lurch-atom-body"><table><colgroup><col><col></colgroup><tbody><tr><td colspan="2"><b>Imported dependency document</b></td></tr><tr><td>Description:</td><td><tt>none</tt></td></tr><tr><td>Filename:</td><td><tt>math/Pred-Rules.lurch</tt></td></tr><tr><td>Source:</td><td>the web</td></tr><tr><td>Auto-refresh:</td><td>yes</td></tr></tbody></table></div></div></div></div>
            <div id="document"><div>
<div>&nbsp;</div>
</div>
<h1>Logic Theorems</h1>
<p>This is a basic library of the rules that are theorems provable in the system defined by the rules in the Predicate Logic with Equality library.</p>
<hr>
<h3>Constants</h3>
<p>No additional constants are required.&nbsp;</p>
<h3>Theorems (as rules)</h3>
<p>The first rule uses '<span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;\\equiv&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">≡</span></span></span></span></span>' to indicate that it functions effectively as two rules, one where&nbsp;<span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;\\text{not}(\\text{not}(W))&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">not</span><span class="ML__cmr">(</span><span class="ML__text">not</span><span class="ML__cmr">(</span><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__cmr">))</span></span></span></span></span> is given and <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span> is the conclusion and a second rule where <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span> is given and <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;\\text{not}(\\text{not}(W))&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">not</span><span class="ML__cmr">(</span><span class="ML__text">not</span><span class="ML__cmr">(</span><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__cmr">))</span></span></span></span></span> is the conclusion.&nbsp; The analogous interpretation applies even when there are multiple expressions on the left hand or right hand side of the <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;\\equiv&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">≡</span></span></span></span></span> symbol.</p>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Theorem (double negative)</strong></p>
<p style="text-align: left;"><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;not (not W) equiv W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">not </span><span class="ML__left-right" style="margin-top: 0em; height: 0.68333em;"><span class="ML__small-delim ML__open">(</span><span class="ML__text">not </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">&nbsp;</span><span class="ML__cmr">≡&nbsp;</span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span>&nbsp; &nbsp;</p>
</div>
<div>
<div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Theorem (excluded middle)</strong></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W or not W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__text"> or not </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span></p>
</div>
</div>
<div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Theorem (commutativity of 'or')</strong></p>
<div class="lurch-atom" data-metadata_type="&quot;premise&quot;" data-shell_title="">
<p><em>Given</em></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W or V &quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__text"> or </span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
</div>
<p><em>Conclude</em>&nbsp;<span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;V or W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.23em;">V</span><span class="ML__text"> or </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span></p>
</div>
</div>
<div>
<div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Theorem (associativity of 'or')</strong></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;(W or V) or U ≡ W or (V or U)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__left-right" style="margin-top: 0em; height: 0.68333em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__text"> or </span><span class="ML__mathit" style="margin-right: 0.23em;">V</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__text"> or </span><span class="ML__mathit" style="margin-right: 0.11em;">U</span><span class="ML__cmr">&nbsp;</span><span class="ML__cmr">≡&nbsp;</span><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__text"> or </span><span class="ML__left-right" style="margin-top: 0em; height: 0.68333em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.23em;">V</span><span class="ML__text"> or </span><span class="ML__mathit" style="margin-right: 0.11em;">U</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span>&nbsp;</p>
</div>
</div>
</div>
<div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Theorem (alternate definition of 'implies')</strong></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W implies V equiv &quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__cmr">⇒</span><span class="ML__mathit" style="margin-right: 0.23em;">V</span><span class="ML__cmr">&nbsp;</span><span class="ML__cmr">≡&nbsp;</span></span></span></span></span> <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;not W or V&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">not </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__text"> or </span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
</div>
</div>
<div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Theorem (alternate or-)</strong></p>
<div class="lurch-atom" data-metadata_type="&quot;premise&quot;" data-shell_title="">
<p><em>Given</em></p>
<p><em><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W or V&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__text"> or </span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></em></p>
<p><em><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;not W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">not </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span></em></p>
</div>
<p>Conclude&nbsp;<span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;V&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
</div>
</div>
<div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Theorem (alternate or-)</strong></p>
<div class="lurch-atom" data-metadata_type="&quot;premise&quot;" data-shell_title="">
<p><em>Given</em></p>
<p><em><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W or V&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__text"> or </span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></em></p>
<p><em><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;not V&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">not </span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></em></p>
</div>
<p>Conclude <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span></p>
</div>
</div>
<div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Theorem (negated implication)</strong></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;not (W implies V)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">not </span><span class="ML__left-right" style="margin-top: 0em; height: 0.68333em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__cmr">⇒</span><span class="ML__mathit" style="margin-right: 0.23em;">V</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span> <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;≡&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">&nbsp;≡&nbsp;</span></span></span></span></span> <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span>,&nbsp; <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;not V&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">not </span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
</div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Theorem (contrapositive)</strong></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W implies V equiv&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__cmr">⇒</span><span class="ML__mathit" style="margin-right: 0.23em;">V</span><span class="ML__cmr">&nbsp;</span><span class="ML__cmr">≡&nbsp;</span></span></span></span></span> <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot; not V implies not W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">not </span><span class="ML__mathit" style="margin-right: 0.23em;">V</span><span class="ML__cmr">⇒</span><span class="ML__text">not </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span></p>
</div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Theorem (DeMorgan's Law)</strong></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;not (W and V) equiv &quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">not </span><span class="ML__left-right" style="margin-top: 0em; height: 0.69444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__text"> and </span><span class="ML__mathit" style="margin-right: 0.23em;">V</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">&nbsp;</span><span class="ML__cmr">≡&nbsp;</span></span></span></span></span> <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;not W or not V&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">not </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__text"> or not </span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
</div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Theorem (DeMorgan's Law)</strong></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;not (W or V) equiv &quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">not </span><span class="ML__left-right" style="margin-top: 0em; height: 0.68333em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__text"> or </span><span class="ML__mathit" style="margin-right: 0.23em;">V</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">&nbsp;</span><span class="ML__cmr">≡&nbsp;</span></span></span></span></span> <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;not W and not V&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">not </span><span class="ML__mathit" style="margin-right: 0.14em;">W</span><span class="ML__text"> and not </span><span class="ML__mathit" style="margin-right: 0.23em;">V</span></span></span></span></span></p>
</div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Theorem (anything follows from a contradiction)</strong></p>
<div class="lurch-atom" data-metadata_type="&quot;premise&quot;" data-shell_title="">
<p><em>Given</em></p>
<p><em><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;→←&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">→←</span></span></span></span></span></em></p>
</div>
<p>Conclude&nbsp;<span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;W&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">W</span></span></span></span></span></p>
</div>
<hr></div>
</div></div>
        </div></div><div class="lurch-atom-body"><table><colgroup><col><col></colgroup><tbody><tr><td colspan="2"><b>Imported dependency document</b></td></tr><tr><td>Description:</td><td><tt>none</tt></td></tr><tr><td>Source:</td><td><tt>math/Logic-theorems-Rules.lurch</tt> (web)</td></tr><tr><td>Auto-refresh:</td><td>yes</td></tr></tbody></table></div></div></div></div>
            <div id="document"><h1>Peano Axioms</h1>
<div>This is a library containing the Peano Axioms. They define a formal system for the Natural Numbers.&nbsp; This library includes all of the rules, definitions, and axioms from the Logic Theorems library.</div>
<hr>
<h3>Constants</h3>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Declare 0, sigma, +, *, leq&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Declare </span><span class="ML__cmr">0</span><span class="ML__text">, </span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">σ</span><span class="ML__text">, </span><span class="ML__cmr">+</span><span class="ML__text">, </span><span class="ML__cmr">⋅</span><span class="ML__text">, and </span><span class="ML__cmr">≤</span></span></span></span></span> to be constants.</p>
<h3>Peano Axioms</h3>
<h4><strong>The set <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;\\mathbb{N}&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__bb">N</span></span></span></span></span></strong></h4>
<p>(We don't need axioms N0 or N1 because in this context the domain of discourse is the set of natural numbers.)</p>
<p>&nbsp; &nbsp; <strong>Axiom N0:</strong> <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;0&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">0</span></span></span></span></span> is a natural number.</p>
<p>&nbsp; &nbsp; <strong>Axiom </strong><strong>N1:</strong> For all natural numbers&nbsp;<span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;n&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">n</span></span></span></span></span>, the successor of <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;n&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">n</span></span></span></span></span> is a natural number.</p>
<div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Axiom N2 (successor is injective)</strong></p>
<div class="lurch-atom" data-metadata_type="&quot;premise&quot;" data-shell_title="">
<p><em>Given </em></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;sigma(m)=sigma(n)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">σ</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">m</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">=</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">σ</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
</div>
<p><em>Conclude</em> <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;m=n&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">m</span><span class="ML__cmr">=</span><span class="ML__mathit">n</span></span></span></span></span></p>
</div>
</div>
<div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Axiom N3 (zero is first)&nbsp; &nbsp; </strong></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;0 neq sigma(n)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">0</span><span class="ML__rlap"><span class="ML__inner"><span class="ML__cmr"></span></span></span><span class="ML__cmr">=</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">σ</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
</div>
</div>
<div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Axiom N4 (induction)</strong></p>
<div class="lurch-atom" data-metadata_type="&quot;premise&quot;" data-shell_title="">
<p><em>Given</em></p>
<p><em><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;𝜆P(0)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.64444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__cmr">0</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span> (base case)</em></p>
<div class="lurch-atom" data-metadata_type="&quot;subproof&quot;" data-shell_title="">
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Let k be such that 𝜆P(k)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Let </span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__text"> be such that </span><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.69444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span> (<em>inductive hypothesis</em>)</p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;𝜆P(sigma(k))&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: -0.25em; height: 1em;"><span class="ML__small-delim ML__open">(</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">σ</span><span class="ML__left-right" style="margin-top: 0em; height: 0.69444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
</div>
</div>
<p>Conclude <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;forall n.𝜆P(n)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">∀</span><span class="ML__mathit">n</span><span class="ML__cmr">.</span><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
</div>
</div>
<div><strong>Addition</strong></div>
<div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Axiom A0 (base case for addition)</strong></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;n+0=n&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">n</span><span class="ML__cmr">+</span><span class="ML__cmr">0</span><span class="ML__cmr">=</span><span class="ML__mathit">n</span></span></span></span></span></p>
</div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Axiom A1 (recursion for addition)&nbsp; &nbsp;&nbsp;</strong></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;m+sigma(n)=sigma(m+n)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">m</span><span class="ML__cmr">+</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">σ</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">=</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">σ</span><span class="ML__left-right" style="margin-top: -0.08333em; height: 0.66666em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">m</span><span class="ML__cmr">+</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
</div>
</div>
<div><strong>Multiplication</strong></div>
<div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Axiom M0 (base case for multiplication)</strong></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;n*0=0&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">n</span><span class="ML__cmr">⋅</span><span class="ML__cmr">0</span><span class="ML__cmr">=</span><span class="ML__cmr">0</span></span></span></span></span></p>
</div>
</div>
<div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Axiom M1 (recursion for multiplication)</strong></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;m*sigma(n) = m+m*n&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">m</span><span class="ML__cmr">⋅</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">σ</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">=</span><span class="ML__mathit">m</span><span class="ML__cmr">+</span><span class="ML__mathit">m</span><span class="ML__cmr">⋅</span><span class="ML__mathit">n</span></span></span></span></span></p>
</div>
</div>
<div><strong>Order</strong></div>
<div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Axiom I (inequality)</strong></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;m leq n equiv exists k.m+k=n&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">m</span><span class="ML__cmr">≤</span><span class="ML__mathit">n</span><span class="ML__cmr">&nbsp;</span><span class="ML__cmr">≡&nbsp;</span><span class="ML__cmr">∃</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__cmr">.</span><span class="ML__mathit">m</span><span class="ML__cmr">+</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__cmr">=</span><span class="ML__mathit">n</span></span></span></span></span></p>
</div>
</div>
<hr></div>
        </div></div><div class="lurch-atom-body"><table><colgroup><col><col></colgroup><tbody><tr><td colspan="2"><b>Imported dependency document</b></td></tr><tr><td>Description:</td><td><tt>none</tt></td></tr><tr><td>Source:</td><td><tt>math/Peano-Rules.lurch</tt> (web)</td></tr><tr><td>Auto-refresh:</td><td>yes</td></tr></tbody></table></div></div></div></div>
            <div id="document"><div>
<div>&nbsp;</div>
</div>
<h1>Number Theory</h1>
<p>This library contains some definitions from Number Theory.&nbsp; It includes all of the rules in the Peano Axioms library.</p>
<hr>
<h3>Constants</h3>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Declare 1, 2, 3, 4, 5, <, is, |, prime, even, odd&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Declare </span><span class="ML__cmr">1</span><span class="ML__text">, </span><span class="ML__cmr">2</span><span class="ML__text">, </span><span class="ML__cmr">3</span><span class="ML__text">, </span><span class="ML__cmr">4</span><span class="ML__text">, </span><span class="ML__cmr">5</span><span class="ML__text">, </span><span class="ML__cmr">&lt;</span><span class="ML__text">, is, </span><span class="ML__cmr">∣</span><span class="ML__text">, prime, even, and odd</span></span></span></span></span></p>
<h3>Definitions</h3>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Base ten digits</strong><br><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;1=sigma(0)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">1</span><span class="ML__cmr">=</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">σ</span><span class="ML__left-right" style="margin-top: 0em; height: 0.64444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__cmr">0</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;2=sigma(1)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">2</span><span class="ML__cmr">=</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">σ</span><span class="ML__left-right" style="margin-top: 0em; height: 0.64444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__cmr">1</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;3=sigma(2)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">3</span><span class="ML__cmr">=</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">σ</span><span class="ML__left-right" style="margin-top: 0em; height: 0.64444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__cmr">2</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;4=sigma(3)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">4</span><span class="ML__cmr">=</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">σ</span><span class="ML__left-right" style="margin-top: 0em; height: 0.64444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__cmr">3</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;5=sigma(4)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">5</span><span class="ML__cmr">=</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">σ</span><span class="ML__left-right" style="margin-top: 0em; height: 0.64444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__cmr">4</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
</div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Less than</strong>&nbsp;</p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;m<n&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">m</span><span class="ML__cmr">&lt;</span><span class="ML__mathit">n</span></span></span></span></span> &nbsp; <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;equiv&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">&nbsp;≡&nbsp;</span></span></span></span></span> &nbsp; <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;m leq n&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">m</span><span class="ML__cmr">≤</span><span class="ML__mathit">n</span></span></span></span></span>&nbsp; ,&nbsp; <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;m neq n&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">m</span><span class="ML__rlap"><span class="ML__inner"><span class="ML__cmr"></span></span></span><span class="ML__cmr">=</span><span class="ML__mathit">n</span></span></span></span></span>&nbsp;</p>
</div>
<div>
<div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Prime&nbsp; </strong></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;n is prime&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">n</span><span class="ML__text"> is prime</span></span></span></span></span>&nbsp; &nbsp;<span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;≡&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">&nbsp;≡&nbsp;</span></span></span></span></span>&nbsp; <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;1<n&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">1</span><span class="ML__cmr">&lt;</span><span class="ML__mathit">n</span></span></span></span></span>&nbsp; ,&nbsp; <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;not (exists k.(1<k and k<n) and k|n)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">not </span><span class="ML__left-right" style="margin-top: -0.25em; height: 1em;"><span class="ML__small-delim ML__open">(</span><span class="ML__cmr">∃</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__cmr">.</span><span class="ML__left-right" style="margin-top: -0.0391em; height: 0.73354em;"><span class="ML__small-delim ML__open">(</span><span class="ML__cmr">1</span><span class="ML__cmr">&lt;</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__text"> and </span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__cmr">&lt;</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__text"> and </span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__cmr">∣</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
</div>
<p>We can also write rules using the 'If-then' style as an alternative to the 'Given-Conclude' style used in this document's context.&nbsp; We will use this form from now on for any rule that does not contain a subproof premise, or the <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;\\equiv&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">≡</span></span></span></span></span> rule shorthand.</p>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Divides:&nbsp; </strong><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;If m|n&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">If </span><span class="ML__mathit">m</span><span class="ML__cmr">∣</span><span class="ML__mathit">n</span></span></span></span></span> then <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;n=k*m for some k&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">n</span><span class="ML__cmr">=</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__cmr">⋅</span><span class="ML__mathit">m</span><span class="ML__text"> for some </span><span class="ML__mathit" style="margin-right: 0.04em;">k</span></span></span></span></span>.&nbsp;</p>
</div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Divides:&nbsp; </strong><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;If n=k*m&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">If </span><span class="ML__mathit">n</span><span class="ML__cmr">=</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__cmr">⋅</span><span class="ML__mathit">m</span></span></span></span></span> then <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;m|n&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">m</span><span class="ML__cmr">∣</span><span class="ML__mathit">n</span></span></span></span></span>.</p>
</div>
</div>
<div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Even:&nbsp; </strong><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;If n is even &quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">If </span><span class="ML__mathit">n</span><span class="ML__text"> is even</span></span></span></span></span> then <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;n=2*m for some m&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">n</span><span class="ML__cmr">=</span><span class="ML__cmr">2</span><span class="ML__cmr">⋅</span><span class="ML__mathit">m</span><span class="ML__text"> for some </span><span class="ML__mathit">m</span></span></span></span></span>.</p>
</div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Even: </strong><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;If n=2*m&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">If </span><span class="ML__mathit">n</span><span class="ML__cmr">=</span><span class="ML__cmr">2</span><span class="ML__cmr">⋅</span><span class="ML__mathit">m</span></span></span></span></span> then <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;n is even&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">n</span><span class="ML__text"> is even</span></span></span></span></span>.</p>
</div>
</div>
<div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Odd:&nbsp; </strong><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;n is odd&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">n</span><span class="ML__text"> is odd</span></span></span></span></span>&nbsp; &nbsp;<span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;equiv&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">&nbsp;≡&nbsp;</span></span></span></span></span>&nbsp; &nbsp;<span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;n is not even&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">n</span><span class="ML__text"> is not even</span></span></span></span></span></p>
</div>
<hr></div>
</div></div>
        </div></div><div class="lurch-atom-body"><table><colgroup><col><col></colgroup><tbody><tr><td colspan="2"><b>Imported dependency document</b></td></tr><tr><td>Description:</td><td><tt>none</tt></td></tr><tr><td>Source:</td><td><tt>math/Number-theory-Rules.lurch</tt> (web)</td></tr><tr><td>Auto-refresh:</td><td>yes</td></tr></tbody></table></div></div></div></div>
            <div id="document"><h1>Equations</h1>
<p>The Equations Rule is a special built-in validation tool that Lurch provides for dealing with proofs involving lengthy transitive chains of equations, such as&nbsp;</p>
<p>&nbsp;</p>
<p style="text-align: center;"><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;\\begin{align*} a &amp;= b \\\\ &amp;=c \\\\ &amp;=d&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mtable"><span class="col-align-r"><span class="ML__vlist-t ML__vlist-t2"><span class="ML__vlist-r"><span class="ML__vlist" style="height: 2.36em;"><span style="top: -4.51em;"><span style="height: 1.5em; display: inline-block;"><span class="ML__mathit">a</span></span></span></span><span class="ML__vlist-s">​</span></span></span></span><span class="col-align-l"><span class="ML__vlist-t ML__vlist-t2"><span class="ML__vlist-r"><span class="ML__vlist" style="height: 2.36em;"><span style="top: -4.51em;"><span style="height: 1.5em; display: inline-block;"><span class="ML__cmr">=</span><span class="ML__mathit">b</span></span></span><span style="top: -3.01em;"><span style="height: 1.5em; display: inline-block;"><span class="ML__cmr">=</span><span class="ML__mathit">c</span></span></span><span style="top: -1.51em;"><span style="height: 1.2em; display: inline-block;"><span class="ML__cmr">=</span><span class="ML__mathit">d</span></span></span></span><span class="ML__vlist-s">​</span></span></span></span></span></span></span></span></span></p>
<p style="text-align: left;">&nbsp;</p>
<p style="text-align: left;">(entered as&nbsp;<code>a=b=c=d</code>).&nbsp; It automates the application of the substitution and reflexive rules of equality, the derived properties of symmetry and transitivity, and checks each pair in the chain for both direct equality, and equality via a single substitution.&nbsp; This topic includes everything from the Number Theory topic.</p>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Equations Rule</strong>&nbsp; &nbsp;</p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;EquationsRule&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">EquationsRule</span></span></span></span></span></p>
</div>
<hr>
<p>We can also add some convenient rules to avoid the need for explicitly citing 'by substitution' in common situations.</p>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Substitution for is:</strong> <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;If x=y, x is P&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">If </span><span class="ML__mathit">x</span><span class="ML__cmr">=</span><span class="ML__mathit" style="margin-right: 0.04em;">y</span><span class="ML__text"> and </span><span class="ML__mathit">x</span><span class="ML__text"> is </span><span class="ML__mathit" style="margin-right: 0.14em;">P</span></span></span></span></span> then <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;y is P&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.04em;">y</span><span class="ML__text"> is </span><span class="ML__mathit" style="margin-right: 0.14em;">P</span></span></span></span></span>.</p>
</div>
<p>&nbsp;</p>
<h1>&nbsp;</h1></div>
        </div></div><div class="lurch-atom-body"><table><colgroup><col><col></colgroup><tbody><tr><td colspan="2"><b>Imported dependency document</b></td></tr><tr><td>Description:</td><td><tt>none</tt></td></tr><tr><td>Source:</td><td><tt>math/Equations-Rules.lurch</tt> (web)</td></tr><tr><td>Auto-refresh:</td><td>yes</td></tr></tbody></table></div></div></div></div>
            <div id="document"><h1>Number Theory Theorems</h1>
<p>Once we have proven theorems it is convenient to add the most useful ones as new rules rather than reproving them from scratch each time we need to use one.&nbsp; This library contains some of the most useful theorems about the natural numbers that can be proven using the Peano Axioms.&nbsp; All of the rules from the Number Theory library are also available.</p>
<hr>
<h3>Theorems</h3>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Theorem (alternate definition of 𝜎)&nbsp;</strong></p>
<p style="text-align: center; line-height: 2;"><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;sigma(n)=n+1&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">σ</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">=</span><span class="ML__mathit">n</span><span class="ML__cmr">+</span><span class="ML__cmr">1</span></span></span></span></span></p>
</div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Theorem (commutativity of addition)&nbsp;</strong></p>
<p style="text-align: center; line-height: 2;"><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;m+n=n+m&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">m</span><span class="ML__cmr">+</span><span class="ML__mathit">n</span><span class="ML__cmr">=</span><span class="ML__mathit">n</span><span class="ML__cmr">+</span><span class="ML__mathit">m</span></span></span></span></span></p>
</div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Theorem (associativity of addition)&nbsp;</strong></p>
<p style="text-align: center; line-height: 2;"><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;(m+n)+p = m+(n+p)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__left-right" style="margin-top: -0.08333em; height: 0.66666em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">m</span><span class="ML__cmr">+</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">+</span><span class="ML__mathit">p</span><span class="ML__cmr">=</span><span class="ML__mathit">m</span><span class="ML__cmr">+</span><span class="ML__left-right" style="margin-top: -0.19444em; height: 0.7777700000000001em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">n</span><span class="ML__cmr">+</span><span class="ML__mathit">p</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
</div>
<div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Theorem (addition of zero on the left)&nbsp;</strong></p>
<p style="text-align: center; line-height: 2;"><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;0+n=n&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">0</span><span class="ML__cmr">+</span><span class="ML__mathit">n</span><span class="ML__cmr">=</span><span class="ML__mathit">n</span></span></span></span></span></p>
</div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Theorem (multiplication by zero on the left)</strong>&nbsp;</p>
<p style="text-align: center; line-height: 2;"><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;0*n = 0&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">0</span><span class="ML__cmr">⋅</span><span class="ML__mathit">n</span><span class="ML__cmr">=</span><span class="ML__cmr">0</span></span></span></span></span></p>
</div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Theorem (identity of multiplication)&nbsp;</strong></p>
<p style="text-align: center; line-height: 2;"><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;n*1 = n&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">n</span><span class="ML__cmr">⋅</span><span class="ML__cmr">1</span><span class="ML__cmr">=</span><span class="ML__mathit">n</span></span></span></span></span>&nbsp;</p>
</div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Theorem (identity of multiplication)&nbsp;</strong></p>
<p style="text-align: center; line-height: 2;"><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;1*n = n&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">1</span><span class="ML__cmr">⋅</span><span class="ML__mathit">n</span><span class="ML__cmr">=</span><span class="ML__mathit">n</span></span></span></span></span>&nbsp;</p>
</div>
</div>
<div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Theorem (commutativity of multiplication)&nbsp;</strong></p>
<p style="text-align: center; line-height: 2;"><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;m*n = n*m&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">m</span><span class="ML__cmr">⋅</span><span class="ML__mathit">n</span><span class="ML__cmr">=</span><span class="ML__mathit">n</span><span class="ML__cmr">⋅</span><span class="ML__mathit">m</span></span></span></span></span></p>
</div>
</div>
<div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Theorem(associativity of multiplication)&nbsp;</strong></p>
<p style="text-align: center; line-height: 2;"><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;(m*n)*p = m*(n*p)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__left-right" style="margin-top: 0em; height: 0.44445em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">m</span><span class="ML__cmr">⋅</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">⋅</span><span class="ML__mathit">p</span><span class="ML__cmr">=</span><span class="ML__mathit">m</span><span class="ML__cmr">⋅</span><span class="ML__left-right" style="margin-top: -0.19444em; height: 0.63889em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">n</span><span class="ML__cmr">⋅</span><span class="ML__mathit">p</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
</div>
</div>
<div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Theorem (distributive property of <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;\\cdot&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">⋅</span></span></span></span></span> over <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;+&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">+</span></span></span></span></span>)</strong>&nbsp;&nbsp;</p>
<p style="text-align: center; line-height: 2;"><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;m*(n+p)=m*n+m*p&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">m</span><span class="ML__cmr">⋅</span><span class="ML__left-right" style="margin-top: -0.19444em; height: 0.7777700000000001em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">n</span><span class="ML__cmr">+</span><span class="ML__mathit">p</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">=</span><span class="ML__mathit">m</span><span class="ML__cmr">⋅</span><span class="ML__mathit">n</span><span class="ML__cmr">+</span><span class="ML__mathit">m</span><span class="ML__cmr">⋅</span><span class="ML__mathit">p</span></span></span></span></span></p>
</div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Theorem (distributive property of <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;\\cdot&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">⋅</span></span></span></span></span> over <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;+&quot;" data-metadata_given="false"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">+</span></span></span></span></span>)</strong>&nbsp;&nbsp;</p>
<p style="text-align: center; line-height: 2;"><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;(n+p)*m=n*m+p*m&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__left-right" style="margin-top: -0.19444em; height: 0.7777700000000001em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">n</span><span class="ML__cmr">+</span><span class="ML__mathit">p</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">⋅</span><span class="ML__mathit">m</span><span class="ML__cmr">=</span><span class="ML__mathit">n</span><span class="ML__cmr">⋅</span><span class="ML__mathit">m</span><span class="ML__cmr">+</span><span class="ML__mathit">p</span><span class="ML__cmr">⋅</span><span class="ML__mathit">m</span></span></span></span></span></p>
</div>
</div>
<hr>
<p>&nbsp;</p></div>
        </div></div><div class="lurch-atom-body"><table><colgroup><col><col></colgroup><tbody><tr><td colspan="2"><b>Imported dependency document</b></td></tr><tr><td>Description:</td><td><tt>none</tt></td></tr><tr><td>Source:</td><td><tt>math/Number-theory-theorems-Rules.lurch</tt> (web)</td></tr><tr><td>Auto-refresh:</td><td>yes</td></tr></tbody></table></div></div></div></div>
            <div id="document"><h1>Sequences and Recursion</h1>
<p>Once we have defined the natural numbers we can use them to define sequences, both finite and infinite. They can be defined explicitly or recursively.&nbsp; In this topic we define a few well known recursive sequences.&nbsp; All of the rules, definitions, and theorems in the Number Theory Theorems topic are also available here.</p>
<hr>
<h3>Constants</h3>
<p><span class="lurch-atom atom-is-selected" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Declare Sum, Fib, !, multinomial, choose, ^&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Declare Sum, </span><span class="ML__mathit" style="margin-right: 0.14em;">F</span><span class="ML__text">, factorial, multinomial, choose, and </span><span class="ML__msubsup"><span class="ML__vlist-t"><span class="ML__vlist-r"><span class="ML__vlist" style="height: 0.81em;"><span style="top: -3.41em; margin-right: 0.05em;"><span style="height: 0.39em; display: inline-block; font-size: 70%;"><span class="ML__cmr">∧</span></span></span></span></span></span></span></span></span></span></span> to be constants.</p>
<h3>Definitions</h3>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Summation (base case)</strong></p>
<p style="line-height: 2;"><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;sum k to 0 of @P(k) = @P(0)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__op-group"><span class="ML__vlist-t ML__vlist-t2"><span class="ML__vlist-r"><span class="ML__vlist" style="height: 1.81em;"><span class="ML__center" style="top: -1.84em;"><span style="height: 0.49em; display: inline-block; font-size: 70%;"><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__cmr">=0</span></span></span><span class="ML__center" style="top: -3.05em;"><span style="height: 1.61em; display: inline-block;"><span class="ML__op-symbol ML__large-op">∑</span></span></span><span class="ML__center" style="top: -4.3em;"><span style="height: 0.46em; display: inline-block; font-size: 70%;"><span class="ML__cmr">0</span></span></span></span><span class="ML__vlist-s">​</span></span></span></span><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.69444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">=</span><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.64444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__cmr">0</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
</div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Summation (recursion)</strong></p>
<p style="line-height: 2;"><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;sum k to sigma(n) of @P(k) = @P(sigma(n))+sum k to n of @P(k)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__op-group"><span class="ML__vlist-t ML__vlist-t2"><span class="ML__vlist-r"><span class="ML__vlist" style="height: 1.97em;"><span class="ML__center" style="top: -1.84em;"><span style="height: 0.49em; display: inline-block; font-size: 70%;"><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__cmr">=0</span></span></span><span class="ML__center" style="top: -3.05em;"><span style="height: 1.61em; display: inline-block;"><span class="ML__op-symbol ML__large-op">∑</span></span></span><span class="ML__center" style="top: -4.38em;"><span style="height: 0.7em; display: inline-block; font-size: 70%;"><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">σ</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span></span></span></span><span class="ML__vlist-s">​</span></span></span></span><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.69444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">=</span><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: -0.25em; height: 1em;"><span class="ML__small-delim ML__open">(</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">σ</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">+</span><span class="ML__op-group"><span class="ML__vlist-t ML__vlist-t2"><span class="ML__vlist-r"><span class="ML__vlist" style="height: 1.66em;"><span class="ML__center" style="top: -1.84em;"><span style="height: 0.49em; display: inline-block; font-size: 70%;"><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__cmr">=0</span></span></span><span class="ML__center" style="top: -3.05em;"><span style="height: 1.61em; display: inline-block;"><span class="ML__op-symbol ML__large-op">∑</span></span></span><span class="ML__center" style="top: -4.3em;"><span style="height: 0.31em; display: inline-block; font-size: 70%;"><span class="ML__mathit">n</span></span></span></span><span class="ML__vlist-s">​</span></span></span></span><span class="ML__cal" style="margin-right: 0.09em;">P</span><span class="ML__left-right" style="margin-top: 0em; height: 0.69444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
</div>
<div>
<p>&nbsp;</p>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Natural Number Exponentiation (base case)</strong></p>
<p style="line-height: 2;"><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;z^0=1&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.05em;">z</span><span class="ML__msubsup"><span class="ML__vlist-t"><span class="ML__vlist-r"><span class="ML__vlist" style="height: 0.87em;"><span style="top: -3.41em; margin-right: 0.05em;"><span style="height: 0.46em; display: inline-block; font-size: 70%;"><span class="ML__cmr">0</span></span></span></span></span></span></span><span class="ML__cmr">=</span><span class="ML__cmr">1</span></span></span></span></span></p>
</div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Natural Number Exponentiation (recursion)</strong></p>
<p style="line-height: 2;"><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;z^(sigma(n))=z*z^n&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.05em;">z</span><span class="ML__msubsup"><span class="ML__vlist-t"><span class="ML__vlist-r"><span class="ML__vlist" style="height: 0.94em;"><span style="top: -3.41em; margin-right: 0.05em;"><span style="height: 0.7em; display: inline-block; font-size: 70%;"><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">σ</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></span></span><span class="ML__cmr">=</span><span class="ML__mathit" style="margin-right: 0.05em;">z</span><span class="ML__cmr">⋅</span><span class="ML__mathit" style="margin-right: 0.05em;">z</span><span class="ML__msubsup"><span class="ML__vlist-t"><span class="ML__vlist-r"><span class="ML__vlist" style="height: 0.72em;"><span style="top: -3.41em; margin-right: 0.05em;"><span style="height: 0.31em; display: inline-block; font-size: 70%;"><span class="ML__mathit">n</span></span></span></span></span></span></span></span></span></span></span></p>
</div>
<p>&nbsp;</p>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Factorial (base case)</strong></p>
<p style="line-height: 2;"><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;0! =1&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">0!</span><span class="ML__cmr">=</span><span class="ML__cmr">1</span></span></span></span></span></p>
</div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Factorial (recursion)</strong></p>
<p style="line-height: 2;"><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;sigma(n)! = sigma(n)*n!&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">σ</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">!</span><span class="ML__cmr">=</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">σ</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">⋅</span><span class="ML__mathit">n</span><span class="ML__cmr">!</span></span></span></span></span></p>
</div>
</div>
<div>
<p>&nbsp;</p>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Fibonacci Numbers (base cases)</strong></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Fib_(0)=1&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">F</span><span class="ML__msubsup"><span class="ML__vlist-t ML__vlist-t2"><span class="ML__vlist-r"><span class="ML__vlist" style="height: 0.31em;"><span style="top: -2.85em; margin-right: 0.05em;"><span style="height: 0.46em; display: inline-block; font-size: 70%;"><span class="ML__cmr">0</span></span></span></span><span class="ML__vlist-s">​</span></span></span></span><span class="ML__cmr">=</span><span class="ML__cmr">1</span></span></span></span></span></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Fib_(1)=1&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">F</span><span class="ML__msubsup"><span class="ML__vlist-t ML__vlist-t2"><span class="ML__vlist-r"><span class="ML__vlist" style="height: 0.31em;"><span style="top: -2.85em; margin-right: 0.05em;"><span style="height: 0.46em; display: inline-block; font-size: 70%;"><span class="ML__cmr">1</span></span></span></span><span class="ML__vlist-s">​</span></span></span></span><span class="ML__cmr">=</span><span class="ML__cmr">1</span></span></span></span></span></p>
</div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Fibonacci Numbers (recursion)</strong></p>
<p style="line-height: 2;"><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Fib_(n+2)=Fib_(n+1)+Fib_(n)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">F</span><span class="ML__msubsup"><span class="ML__vlist-t ML__vlist-t2"><span class="ML__vlist-r"><span class="ML__vlist" style="height: 0.31em;"><span style="top: -2.85em; margin-right: 0.05em;"><span style="height: 0.51em; display: inline-block; font-size: 70%;"><span class="ML__mathit">n</span><span class="ML__cmr">+2</span></span></span></span><span class="ML__vlist-s">​</span></span></span></span><span class="ML__cmr">=</span><span class="ML__mathit" style="margin-right: 0.14em;">F</span><span class="ML__msubsup"><span class="ML__vlist-t ML__vlist-t2"><span class="ML__vlist-r"><span class="ML__vlist" style="height: 0.31em;"><span style="top: -2.85em; margin-right: 0.05em;"><span style="height: 0.51em; display: inline-block; font-size: 70%;"><span class="ML__mathit">n</span><span class="ML__cmr">+1</span></span></span></span><span class="ML__vlist-s">​</span></span></span></span><span class="ML__cmr">+</span><span class="ML__mathit" style="margin-right: 0.14em;">F</span><span class="ML__msubsup"><span class="ML__vlist-t ML__vlist-t2"><span class="ML__vlist-r"><span class="ML__vlist" style="height: 0.16em;"><span style="top: -2.85em; margin-right: 0.05em;"><span style="height: 0.31em; display: inline-block; font-size: 70%;"><span class="ML__mathit">n</span></span></span></span><span class="ML__vlist-s">​</span></span></span></span></span></span></span></span></p>
</div>
</div>
<div>
<p>&nbsp;</p>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Multinomial coefficients (base case)</strong></p>
<p style="line-height: 2;"><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;multinomial(m,0)=1&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__left-right" style="margin-top: -0.19444em; height: 0.8388800000000001em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">m</span><span class="ML__cmr">,</span><span class="ML__cmr">0</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">=</span><span class="ML__cmr">1</span></span></span></span></span></p>
</div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Multinomial coefficients (base case)</strong></p>
<p style="line-height: 2;"><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;multinomial(0,n)=1&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__left-right" style="margin-top: -0.19444em; height: 0.8388800000000001em;"><span class="ML__small-delim ML__open">(</span><span class="ML__cmr">0,</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">=</span><span class="ML__cmr">1</span></span></span></span></span></p>
</div>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Multinomial coefficients (recursion)</strong></p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;multinomial(sigma(m),sigma(n)) \n  = multinomial(sigma(m),n) +\n    multinomial(m,sigma(n))&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__left-right" style="margin-top: -0.25em; height: 1em;"><span class="ML__small-delim ML__open">(</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">σ</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">m</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">,</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">σ</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">=</span><span class="ML__left-right" style="margin-top: -0.25em; height: 1em;"><span class="ML__small-delim ML__open">(</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">σ</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">m</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">,</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">+</span><span class="ML__left-right" style="margin-top: -0.25em; height: 1em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">m</span><span class="ML__cmr">,</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">σ</span><span class="ML__left-right" style="margin-top: 0em; height: 0.43056em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
</div>
</div>
<div>
<p>&nbsp;</p>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Binomial Coefficients</strong></p>
<p style="line-height: 2;"><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;n+m choose m =multinomial(n,m)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mfrac"><span class="ML__delim-size3">(</span><span class="ML__vlist-t ML__vlist-t2"><span class="ML__vlist-r"><span class="ML__vlist" style="height: 1.09em;"><span class="ML__center" style="top: -3.5em;"><span style="height: 0.67em; display: inline-block;"><span class="ML__mathit">n</span><span class="ML__cmr">+</span><span class="ML__mathit">m</span></span></span><span class="ML__center" style="top: -2.31em;"><span style="height: 0.44em; display: inline-block;"><span class="ML__mathit">m</span></span></span></span><span class="ML__vlist-s">​</span></span></span><span class="ML__delim-size3">)</span></span><span class="ML__cmr">=</span><span class="ML__left-right" style="margin-top: -0.19444em; height: 0.625em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">n</span><span class="ML__cmr">,</span><span class="ML__mathit">m</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
</div>
</div>
<div><hr></div></div>
        </div></div><div class="lurch-atom-body"><table><colgroup><col><col></colgroup><tbody><tr><td colspan="2"><b>Imported dependency document</b></td></tr><tr><td>Description:</td><td><tt>none</tt></td></tr><tr><td>Source:</td><td><tt>math/Sequences-Rules.lurch</tt> (web)</td></tr><tr><td>Auto-refresh:</td><td>yes</td></tr></tbody></table></div></div></div></div>
            <div id="document"><h1>In Class Examples</h1>
<h3>March 26, 2024</h3>
<p>Some examples involving Sequences and Recursion.&nbsp; All free variables represent natural numbers.</p>
<div class="lurch-atom" data-metadata_type="&quot;rule&quot;" data-shell_title="Rule:">
<p><strong>Arithmetic:&nbsp;</strong><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;1+1=2&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">1</span><span class="ML__cmr">+</span><span class="ML__cmr">1</span><span class="ML__cmr">=</span><span class="ML__cmr">2</span></span></span></span></span></p>
</div>
<hr>
<div class="lurch-atom" data-metadata_type="&quot;theorem&quot;" data-shell_title="Theorem:">
<p><strong>Theorem 8.11 (Gauss' formula):</strong> &nbsp;</p>
<p style="text-align: center;"><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;2*(sum i to n of i) = n*(n+1)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">2</span><span class="ML__cmr">&sdot;</span><span class="ML__left-right" style="margin-top: -1.277669em; height: 2.929066em;"><span class="ML__open ML__delim-size4">(</span><span class="ML__op-group"><span class="ML__vlist-t ML__vlist-t2"><span class="ML__vlist-r"><span class="ML__vlist" style="height: 1.66em;"><span class="ML__center" style="top: -1.87em;"><span style="height: 0.47em; display: inline-block; font-size: 70%;"><span class="ML__mathit">i</span><span class="ML__cmr">=0</span></span></span><span class="ML__center" style="top: -3.05em;"><span style="height: 1.61em; display: inline-block;"><span class="ML__op-symbol ML__large-op">&sum;</span></span></span><span class="ML__center" style="top: -4.3em;"><span style="height: 0.31em; display: inline-block; font-size: 70%;"><span class="ML__mathit">n</span></span></span></span><span class="ML__vlist-s">​</span></span></span></span><span class="ML__mathit">i</span><span class="ML__close ML__delim-size4">)</span></span><span class="ML__cmr">=</span><span class="ML__mathit">n</span><span class="ML__cmr">&sdot;</span><span class="ML__left-right" style="margin-top: -0.08333em; height: 0.72777em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">n</span><span class="ML__cmr">+</span><span class="ML__cmr">1</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span>&nbsp;</p>
</div>
<div class="lurch-atom" data-metadata_type="&quot;proof&quot;" data-shell_title="Proof:">
<p><strong>Proof:&nbsp;&nbsp;</strong>We will proceed by induction on <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;n&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">n</span></span></span></span></span>.</p>
<p>&nbsp;</p>
<p><em>Base case:</em></p>
<p>&nbsp;</p>
<p><em><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;2*(sum i to 0 of i) = 2*0\n                    = 0\n                    = 0*1\n                    = 0*(1+0)\n                    = 0*(0+1)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mtable"><span class="col-align-r"><span class="ML__vlist-t ML__vlist-t2"><span class="ML__vlist-r"><span class="ML__vlist" style="height: 4.79em;"><span style="top: -6.78em;"><span style="height: 3.38em; display: inline-block;"><span class="ML__cmr">2</span><span class="ML__cmr">&sdot;</span><span class="ML__left-right" style="margin-top: -1.277669em; height: 3.0787820000000004em;"><span class="ML__open ML__delim-size4">(</span><span class="ML__op-group"><span class="ML__vlist-t ML__vlist-t2"><span class="ML__vlist-r"><span class="ML__vlist" style="height: 1.81em;"><span class="ML__center" style="top: -1.87em;"><span style="height: 0.47em; display: inline-block; font-size: 70%;"><span class="ML__mathit">i</span><span class="ML__cmr">=0</span></span></span><span class="ML__center" style="top: -3.05em;"><span style="height: 1.61em; display: inline-block;"><span class="ML__op-symbol ML__large-op">&sum;</span></span></span><span class="ML__center" style="top: -4.3em;"><span style="height: 0.46em; display: inline-block; font-size: 70%;"><span class="ML__cmr">0</span></span></span></span><span class="ML__vlist-s">​</span></span></span></span><span class="ML__mathit">i</span><span class="ML__close ML__delim-size4">)</span></span></span></span></span><span class="ML__vlist-s">​</span></span></span></span><span class="col-align-l"><span class="ML__vlist-t ML__vlist-t2"><span class="ML__vlist-r"><span class="ML__vlist" style="height: 4.79em;"><span style="top: -6.78em;"><span style="height: 3.38em; display: inline-block;"><span class="ML__cmr">=</span><span class="ML__cmr">2</span><span class="ML__cmr">&sdot;</span><span class="ML__cmr">0</span></span></span><span style="top: -4.37em;"><span style="height: 1.5em; display: inline-block;"><span class="ML__cmr">=</span><span class="ML__cmr">0</span></span></span><span style="top: -2.87em;"><span style="height: 1.5em; display: inline-block;"><span class="ML__cmr">=</span><span class="ML__cmr">0</span><span class="ML__cmr">&sdot;</span><span class="ML__cmr">1</span></span></span><span style="top: -1.37em;"><span style="height: 1.5em; display: inline-block;"><span class="ML__cmr">=</span><span class="ML__cmr">0</span><span class="ML__cmr">&sdot;</span><span class="ML__left-right" style="margin-top: -0.08333em; height: 0.72777em;"><span class="ML__small-delim ML__open">(</span><span class="ML__cmr">1</span><span class="ML__cmr">+</span><span class="ML__cmr">0</span><span class="ML__small-delim ML__close">)</span></span></span></span><span style="top: 0.13em;"><span style="height: 1.2em; display: inline-block;"><span class="ML__cmr">=</span><span class="ML__cmr">0</span><span class="ML__cmr">&sdot;</span><span class="ML__left-right" style="margin-top: -0.08333em; height: 0.72777em;"><span class="ML__small-delim ML__open">(</span><span class="ML__cmr">0</span><span class="ML__cmr">+</span><span class="ML__cmr">1</span><span class="ML__small-delim ML__close">)</span></span></span></span></span><span class="ML__vlist-s">​</span></span></span></span></span></span></span></span></span></em></p>
<p><em><br></em>&nbsp;by def of summation, M0, multiplicative identity, A0, commutativity of +</p>
<p>&nbsp;</p>
<p><em>Inductive step<br><br></em></p>
<div class="lurch-atom" data-metadata_type="&quot;subproof&quot;" data-shell_title="">
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Let k be such that 2*(sum i to k of i)=k*(k+1)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Let </span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__text"> be such that </span><span class="ML__cmr">2</span><span class="ML__cmr">&sdot;</span><span class="ML__left-right" style="margin-top: -1.277669em; height: 3.1137820000000005em;"><span class="ML__open ML__delim-size4">(</span><span class="ML__op-group"><span class="ML__vlist-t ML__vlist-t2"><span class="ML__vlist-r"><span class="ML__vlist" style="height: 1.84em;"><span class="ML__center" style="top: -1.87em;"><span style="height: 0.47em; display: inline-block; font-size: 70%;"><span class="ML__mathit">i</span><span class="ML__cmr">=0</span></span></span><span class="ML__center" style="top: -3.05em;"><span style="height: 1.61em; display: inline-block;"><span class="ML__op-symbol ML__large-op">&sum;</span></span></span><span class="ML__center" style="top: -4.3em;"><span style="height: 0.49em; display: inline-block; font-size: 70%;"><span class="ML__mathit" style="margin-right: 0.04em;">k</span></span></span></span><span class="ML__vlist-s">​</span></span></span></span><span class="ML__mathit">i</span><span class="ML__close ML__delim-size4">)</span></span><span class="ML__cmr">=</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__cmr">&sdot;</span><span class="ML__left-right" style="margin-top: -0.08333em; height: 0.77777em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__cmr">+</span><span class="ML__cmr">1</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span></p>
<p style="text-align: center;">&nbsp;</p>
<p style="text-align: center;"><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;2*(sum i to sigma(k) of i) \n= 2*(sigma(k)+(sum i to k of i))\n= 2*sigma(k)+2*(sum i to k of i)\n= 2*sigma(k)+k*(k+1)\n= 2*sigma(k)+k*sigma(k)\n= (2+k)*sigma(k)\n= sigma(k)*(2+k)\n= sigma(k)*((1+1)+k)\n= sigma(k)*(k+(1+1))\n= sigma(k)*((k+1)+1) \n= sigma(k)*(sigma(k)+1)      &quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mtable"><span class="col-align-r"><span class="ML__vlist-t ML__vlist-t2"><span class="ML__vlist-r"><span class="ML__vlist" style="height: 9.75em;"><span style="top: -11.74em;"><span style="height: 3.89em; display: inline-block;"><span class="ML__cmr">2</span><span class="ML__cmr">&sdot;</span><span class="ML__left-right" style="margin-top: -1.277669em; height: 3.2386740000000005em;"><span class="ML__open ML__delim-mult"><span class="delim-size4 ML__vlist-t ML__vlist-t2"><span class="ML__vlist-r"><span class="ML__vlist" style="height: 2.04em;"><span style="top: -2.25em;"><span style="height: 1.81em; display: inline-block;">⎝</span></span><span style="top: -4.03em;"><span style="height: 1.81em; display: inline-block;">⎛</span></span></span><span class="ML__vlist-s">​</span></span></span></span><span class="ML__op-group"><span class="ML__vlist-t ML__vlist-t2"><span class="ML__vlist-r"><span class="ML__vlist" style="height: 1.97em;"><span class="ML__center" style="top: -1.87em;"><span style="height: 0.47em; display: inline-block; font-size: 70%;"><span class="ML__mathit">i</span><span class="ML__cmr">=0</span></span></span><span class="ML__center" style="top: -3.05em;"><span style="height: 1.61em; display: inline-block;"><span class="ML__op-symbol ML__large-op">&sum;</span></span></span><span class="ML__center" style="top: -4.38em;"><span style="height: 0.7em; display: inline-block; font-size: 70%;"><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">&sigma;</span><span class="ML__left-right" style="margin-top: 0em; height: 0.69444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__small-delim ML__close">)</span></span></span></span></span><span class="ML__vlist-s">​</span></span></span></span><span class="ML__mathit">i</span><span class="ML__close ML__delim-mult"><span class="delim-size4 ML__vlist-t ML__vlist-t2"><span class="ML__vlist-r"><span class="ML__vlist" style="height: 2.04em;"><span style="top: -2.25em;"><span style="height: 1.81em; display: inline-block;">⎠</span></span><span style="top: -4.03em;"><span style="height: 1.81em; display: inline-block;">⎞</span></span></span><span class="ML__vlist-s">​</span></span></span></span></span></span></span></span><span class="ML__vlist-s">​</span></span></span></span><span class="col-align-l"><span class="ML__vlist-t ML__vlist-t2"><span class="ML__vlist-r"><span class="ML__vlist" style="height: 9.75em;"><span style="top: -11.74em;"><span style="height: 3.89em; display: inline-block;"><span class="ML__cmr">=</span><span class="ML__cmr">2</span><span class="ML__cmr">&sdot;</span><span class="ML__left-right" style="margin-top: -1.277669em; height: 3.1137820000000005em;"><span class="ML__open ML__delim-size4">(</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">&sigma;</span><span class="ML__left-right" style="margin-top: 0em; height: 0.69444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">+</span><span class="ML__left-right" style="margin-top: -1.277669em; height: 3.1137820000000005em;"><span class="ML__open ML__delim-size4">(</span><span class="ML__op-group"><span class="ML__vlist-t ML__vlist-t2"><span class="ML__vlist-r"><span class="ML__vlist" style="height: 1.84em;"><span class="ML__center" style="top: -1.87em;"><span style="height: 0.47em; display: inline-block; font-size: 70%;"><span class="ML__mathit">i</span><span class="ML__cmr">=0</span></span></span><span class="ML__center" style="top: -3.05em;"><span style="height: 1.61em; display: inline-block;"><span class="ML__op-symbol ML__large-op">&sum;</span></span></span><span class="ML__center" style="top: -4.3em;"><span style="height: 0.49em; display: inline-block; font-size: 70%;"><span class="ML__mathit" style="margin-right: 0.04em;">k</span></span></span></span><span class="ML__vlist-s">​</span></span></span></span><span class="ML__mathit">i</span><span class="ML__close ML__delim-size4">)</span></span><span class="ML__close ML__delim-size4">)</span></span></span></span><span style="top: -8.06em;"><span style="height: 3.42em; display: inline-block;"><span class="ML__cmr">=</span><span class="ML__cmr">2</span><span class="ML__cmr">&sdot;</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">&sigma;</span><span class="ML__left-right" style="margin-top: 0em; height: 0.69444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">+</span><span class="ML__cmr">2</span><span class="ML__cmr">&sdot;</span><span class="ML__left-right" style="margin-top: -1.277669em; height: 3.1137820000000005em;"><span class="ML__open ML__delim-size4">(</span><span class="ML__op-group"><span class="ML__vlist-t ML__vlist-t2"><span class="ML__vlist-r"><span class="ML__vlist" style="height: 1.84em;"><span class="ML__center" style="top: -1.87em;"><span style="height: 0.47em; display: inline-block; font-size: 70%;"><span class="ML__mathit">i</span><span class="ML__cmr">=0</span></span></span><span class="ML__center" style="top: -3.05em;"><span style="height: 1.61em; display: inline-block;"><span class="ML__op-symbol ML__large-op">&sum;</span></span></span><span class="ML__center" style="top: -4.3em;"><span style="height: 0.49em; display: inline-block; font-size: 70%;"><span class="ML__mathit" style="margin-right: 0.04em;">k</span></span></span></span><span class="ML__vlist-s">​</span></span></span></span><span class="ML__mathit">i</span><span class="ML__close ML__delim-size4">)</span></span></span></span><span style="top: -5.64em;"><span style="height: 1.5em; display: inline-block;"><span class="ML__cmr">=</span><span class="ML__cmr">2</span><span class="ML__cmr">&sdot;</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">&sigma;</span><span class="ML__left-right" style="margin-top: 0em; height: 0.69444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">+</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__cmr">&sdot;</span><span class="ML__left-right" style="margin-top: -0.08333em; height: 0.77777em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__cmr">+</span><span class="ML__cmr">1</span><span class="ML__small-delim ML__close">)</span></span></span></span><span style="top: -4.14em;"><span style="height: 1.5em; display: inline-block;"><span class="ML__cmr">=</span><span class="ML__cmr">2</span><span class="ML__cmr">&sdot;</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">&sigma;</span><span class="ML__left-right" style="margin-top: 0em; height: 0.69444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">+</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__cmr">&sdot;</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">&sigma;</span><span class="ML__left-right" style="margin-top: 0em; height: 0.69444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__small-delim ML__close">)</span></span></span></span><span style="top: -2.64em;"><span style="height: 1.5em; display: inline-block;"><span class="ML__cmr">=</span><span class="ML__left-right" style="margin-top: -0.08333em; height: 0.77777em;"><span class="ML__small-delim ML__open">(</span><span class="ML__cmr">2</span><span class="ML__cmr">+</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">&sdot;</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">&sigma;</span><span class="ML__left-right" style="margin-top: 0em; height: 0.69444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__small-delim ML__close">)</span></span></span></span><span style="top: -1.14em;"><span style="height: 1.5em; display: inline-block;"><span class="ML__cmr">=</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">&sigma;</span><span class="ML__left-right" style="margin-top: 0em; height: 0.69444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">&sdot;</span><span class="ML__left-right" style="margin-top: -0.08333em; height: 0.77777em;"><span class="ML__small-delim ML__open">(</span><span class="ML__cmr">2</span><span class="ML__cmr">+</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__small-delim ML__close">)</span></span></span></span><span style="top: 0.36em;"><span style="height: 1.5em; display: inline-block;"><span class="ML__cmr">=</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">&sigma;</span><span class="ML__left-right" style="margin-top: 0em; height: 0.69444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">&sdot;</span><span class="ML__left-right" style="margin-top: -0.25em; height: 1em;"><span class="ML__small-delim ML__open">(</span><span class="ML__left-right" style="margin-top: -0.08333em; height: 0.72777em;"><span class="ML__small-delim ML__open">(</span><span class="ML__cmr">1</span><span class="ML__cmr">+</span><span class="ML__cmr">1</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">+</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__small-delim ML__close">)</span></span></span></span><span style="top: 1.86em;"><span style="height: 1.5em; display: inline-block;"><span class="ML__cmr">=</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">&sigma;</span><span class="ML__left-right" style="margin-top: 0em; height: 0.69444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">&sdot;</span><span class="ML__left-right" style="margin-top: -0.25em; height: 1em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__cmr">+</span><span class="ML__left-right" style="margin-top: -0.08333em; height: 0.72777em;"><span class="ML__small-delim ML__open">(</span><span class="ML__cmr">1</span><span class="ML__cmr">+</span><span class="ML__cmr">1</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__small-delim ML__close">)</span></span></span></span><span style="top: 3.36em;"><span style="height: 1.5em; display: inline-block;"><span class="ML__cmr">=</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">&sigma;</span><span class="ML__left-right" style="margin-top: 0em; height: 0.69444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">&sdot;</span><span class="ML__left-right" style="margin-top: -0.25em; height: 1em;"><span class="ML__small-delim ML__open">(</span><span class="ML__left-right" style="margin-top: -0.08333em; height: 0.77777em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__cmr">+</span><span class="ML__cmr">1</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">+</span><span class="ML__cmr">1</span><span class="ML__small-delim ML__close">)</span></span></span></span><span style="top: 4.86em;"><span style="height: 1.2em; display: inline-block;"><span class="ML__cmr">=</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">&sigma;</span><span class="ML__left-right" style="margin-top: 0em; height: 0.69444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">&sdot;</span><span class="ML__left-right" style="margin-top: -0.25em; height: 1em;"><span class="ML__small-delim ML__open">(</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">&sigma;</span><span class="ML__left-right" style="margin-top: 0em; height: 0.69444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">+</span><span class="ML__cmr">1</span><span class="ML__small-delim ML__close">)</span></span></span></span></span><span class="ML__vlist-s">​</span></span></span></span></span></span></span></span></span></p>
<p style="text-align: center;">&nbsp;</p>
<p style="text-align: left;">by def of summation, distributive, substitution, alt def of sigma, distributive, commutativity of addition,&nbsp; arithmetic, commutativity of addition, associativity of addition, and alt def of sigma.</p>
</div>
<p>&nbsp;<span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;forall n.2*(sum i to n of i)=n*(n+1)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">&forall;</span><span class="ML__mathit">n</span><span class="ML__cmr">.</span><span class="ML__cmr">2</span><span class="ML__cmr">&sdot;</span><span class="ML__left-right" style="margin-top: -1.277669em; height: 2.929066em;"><span class="ML__open ML__delim-size4">(</span><span class="ML__op-group"><span class="ML__vlist-t ML__vlist-t2"><span class="ML__vlist-r"><span class="ML__vlist" style="height: 1.66em;"><span class="ML__center" style="top: -1.87em;"><span style="height: 0.47em; display: inline-block; font-size: 70%;"><span class="ML__mathit">i</span><span class="ML__cmr">=0</span></span></span><span class="ML__center" style="top: -3.05em;"><span style="height: 1.61em; display: inline-block;"><span class="ML__op-symbol ML__large-op">&sum;</span></span></span><span class="ML__center" style="top: -4.3em;"><span style="height: 0.31em; display: inline-block; font-size: 70%;"><span class="ML__mathit">n</span></span></span></span><span class="ML__vlist-s">​</span></span></span></span><span class="ML__mathit">i</span><span class="ML__close ML__delim-size4">)</span></span><span class="ML__cmr">=</span><span class="ML__mathit">n</span><span class="ML__cmr">&sdot;</span><span class="ML__left-right" style="margin-top: -0.08333em; height: 0.72777em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">n</span><span class="ML__cmr">+</span><span class="ML__cmr">1</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span>&nbsp; by induction</p>
<p>&nbsp;<span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;2*(sum i to n of i) = n*(n+1)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">2</span><span class="ML__cmr">&sdot;</span><span class="ML__left-right" style="margin-top: -1.277669em; height: 2.929066em;"><span class="ML__open ML__delim-size4">(</span><span class="ML__op-group"><span class="ML__vlist-t ML__vlist-t2"><span class="ML__vlist-r"><span class="ML__vlist" style="height: 1.66em;"><span class="ML__center" style="top: -1.87em;"><span style="height: 0.47em; display: inline-block; font-size: 70%;"><span class="ML__mathit">i</span><span class="ML__cmr">=0</span></span></span><span class="ML__center" style="top: -3.05em;"><span style="height: 1.61em; display: inline-block;"><span class="ML__op-symbol ML__large-op">&sum;</span></span></span><span class="ML__center" style="top: -4.3em;"><span style="height: 0.31em; display: inline-block; font-size: 70%;"><span class="ML__mathit">n</span></span></span></span><span class="ML__vlist-s">​</span></span></span></span><span class="ML__mathit">i</span><span class="ML__close ML__delim-size4">)</span></span><span class="ML__cmr">=</span><span class="ML__mathit">n</span><span class="ML__cmr">&sdot;</span><span class="ML__left-right" style="margin-top: -0.08333em; height: 0.72777em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">n</span><span class="ML__cmr">+</span><span class="ML__cmr">1</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span> by forall minus, which completes the proof.</p>
<p>&nbsp;</p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;\\square&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__ams">□</span></span></span></span></span></p>
</div>
<hr>
<div class="lurch-atom" data-metadata_type="&quot;theorem&quot;" data-shell_title="Theorem:">
<p><strong>Theorem 8.8 (symmetry of binomial coefficients):</strong>&nbsp; &nbsp;&nbsp;</p>
<p style="text-align: center;"><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;n+m choose m = n+m choose n&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mfrac"><span class="ML__delim-size3">(</span><span class="ML__vlist-t ML__vlist-t2"><span class="ML__vlist-r"><span class="ML__vlist" style="height: 1.09em;"><span class="ML__center" style="top: -3.5em;"><span style="height: 0.67em; display: inline-block;"><span class="ML__mathit">n</span><span class="ML__cmr">+</span><span class="ML__mathit">m</span></span></span><span class="ML__center" style="top: -2.31em;"><span style="height: 0.44em; display: inline-block;"><span class="ML__mathit">m</span></span></span></span><span class="ML__vlist-s">​</span></span></span><span class="ML__delim-size3">)</span></span><span class="ML__cmr">=</span><span class="ML__mfrac"><span class="ML__delim-size3">(</span><span class="ML__vlist-t ML__vlist-t2"><span class="ML__vlist-r"><span class="ML__vlist" style="height: 1.09em;"><span class="ML__center" style="top: -3.5em;"><span style="height: 0.67em; display: inline-block;"><span class="ML__mathit">n</span><span class="ML__cmr">+</span><span class="ML__mathit">m</span></span></span><span class="ML__center" style="top: -2.31em;"><span style="height: 0.44em; display: inline-block;"><span class="ML__mathit">n</span></span></span></span><span class="ML__vlist-s">​</span></span></span><span class="ML__delim-size3">)</span></span></span></span></span></span></p>
</div>
<div class="lurch-atom" data-metadata_type="&quot;proof&quot;" data-shell_title="Proof:">
<p><strong>Proof:</strong>&nbsp; Since binomial coefficients are defined in terms of multinomial coefficients, we will begin by first proving <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;\\forall m.\\forall n.(m,n)=(n,m)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">&forall;</span><span class="ML__mathit">m</span><span class="ML__cmr">.&forall;</span><span class="ML__mathit">n</span><span class="ML__cmr">.(</span><span class="ML__mathit">m</span><span class="ML__cmr">,</span><span class="ML__mathit">n</span><span class="ML__cmr">)</span><span class="ML__cmr">=</span><span class="ML__cmr">(</span><span class="ML__mathit">n</span><span class="ML__cmr">,</span><span class="ML__mathit">m</span><span class="ML__cmr">)</span></span></span></span></span>.&nbsp; We will prove this by induction on <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;m&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">m</span></span></span></span></span>.&nbsp; <em><span style="color: rgb(126, 140, 141);">(Notice that for this, the statement <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;P(m)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit" style="margin-right: 0.14em;">P</span><span class="ML__cmr">(</span><span class="ML__mathit">m</span><span class="ML__cmr">)</span></span></span></span></span></span><span style="color: rgb(126, 140, 141);"> is <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;\\forall n.(m,n)=(n,m)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">&forall;</span><span class="ML__mathit">n</span><span class="ML__cmr">.(</span><span class="ML__mathit">m</span><span class="ML__cmr">,</span><span class="ML__mathit">n</span><span class="ML__cmr">)</span><span class="ML__cmr">=</span><span class="ML__cmr">(</span><span class="ML__mathit">n</span><span class="ML__cmr">,</span><span class="ML__mathit">m</span><span class="ML__cmr">)</span></span></span></span></span> which is a forall statement</span><span style="color: rgb(126, 140, 141);">.)</span></em></p>
<p>&nbsp;</p>
<p><span style="color: rgb(126, 140, 141);"><em>Base case for induction on&nbsp;<span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;m&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">m</span></span></span></span></span>:&nbsp;</em></span></p>
<p>&nbsp;</p>
<p>Since the base case requires us to show <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;\\forall n.(0,n)=(n,0)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">&forall;</span><span class="ML__mathit">n</span><span class="ML__cmr">.(0,</span><span class="ML__mathit">n</span><span class="ML__cmr">)</span><span class="ML__cmr">=</span><span class="ML__cmr">(</span><span class="ML__mathit">n</span><span class="ML__cmr">,</span><span class="ML__cmr">0)</span></span></span></span></span> and this is a forall statement, we will show this by forall plus.</p>
<div class="lurch-atom" data-metadata_type="&quot;subproof&quot;" data-shell_title="">
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Let n&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Let </span><span class="ML__mathit">n</span></span></span></span></span> be arbitrary.&nbsp; Then</p>
<p>&nbsp;</p>
<p style="text-align: center;"><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;multinomial(0,n) = 1\n                 = multinomial(n,0)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mtable"><span class="col-align-r"><span class="ML__vlist-t ML__vlist-t2"><span class="ML__vlist-r"><span class="ML__vlist" style="height: 1.6em;"><span style="top: -3.76em;"><span style="height: 1.5em; display: inline-block;"><span class="ML__left-right" style="margin-top: -0.19444em; height: 0.8388800000000001em;"><span class="ML__small-delim ML__open">(</span><span class="ML__cmr">0,</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span></span></span></span><span class="ML__vlist-s">​</span></span></span></span><span class="col-align-l"><span class="ML__vlist-t ML__vlist-t2"><span class="ML__vlist-r"><span class="ML__vlist" style="height: 1.6em;"><span style="top: -3.76em;"><span style="height: 1.5em; display: inline-block;"><span class="ML__cmr">=</span><span class="ML__cmr">1</span></span></span><span style="top: -2.25em;"><span style="height: 1.2em; display: inline-block;"><span class="ML__cmr">=</span><span class="ML__left-right" style="margin-top: -0.19444em; height: 0.8388800000000001em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">n</span><span class="ML__cmr">,</span><span class="ML__cmr">0</span><span class="ML__small-delim ML__close">)</span></span></span></span></span><span class="ML__vlist-s">​</span></span></span></span></span></span></span></span></span></p>
<p style="text-align: center;">&nbsp;</p>
</div>
<p>So <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;forall n.multinomial(0,n)=multinomial(n,0)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">&forall;</span><span class="ML__mathit">n</span><span class="ML__cmr">.</span><span class="ML__left-right" style="margin-top: -0.19444em; height: 0.8388800000000001em;"><span class="ML__small-delim ML__open">(</span><span class="ML__cmr">0,</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">=</span><span class="ML__left-right" style="margin-top: -0.19444em; height: 0.8388800000000001em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">n</span><span class="ML__cmr">,</span><span class="ML__cmr">0</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span> by forall plus.</p>
<p>&nbsp;</p>
<p><span style="color: rgb(126, 140, 141);"><em>Inductive step for induction on <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;m&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">m</span></span></span></span></span>:&nbsp;</em></span></p>
<p>&nbsp;</p>
<div class="lurch-atom" data-metadata_type="&quot;subproof&quot;" data-shell_title="">
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Let k be such that forall n.multinomial(k,n)=multinomial(n,k)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Let </span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__text"> be such that </span><span class="ML__cmr">&forall;</span><span class="ML__mathit">n</span><span class="ML__cmr">.</span><span class="ML__left-right" style="margin-top: -0.19444em; height: 0.8888799999999999em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__cmr">,</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">=</span><span class="ML__left-right" style="margin-top: -0.19444em; height: 0.8888799999999999em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">n</span><span class="ML__cmr">,</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span>.&nbsp;</p>
<p>&nbsp;</p>
<p><em><span style="color: rgb(126, 140, 141);">We now want to prove that <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;\\forall n.(\\sigma(k),n)=(n,\\sigma(k))&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">&forall;</span><span class="ML__mathit">n</span><span class="ML__cmr">.(</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">&sigma;</span><span class="ML__cmr">(</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__cmr">),</span><span class="ML__mathit">n</span><span class="ML__cmr">)</span><span class="ML__cmr">=</span><span class="ML__cmr">(</span><span class="ML__mathit">n</span><span class="ML__cmr">,</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">&sigma;</span><span class="ML__cmr">(</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__cmr">))</span></span></span></span></span>.&nbsp; This is also a forall statement, and we will prove this by induction on <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;n&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">n</span></span></span></span></span>!&nbsp; In order to distinguish this induction from the one on <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;n&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">n</span></span></span></span></span> let's write this second induction in purple font.&nbsp;</span></em></p>
<p>&nbsp;</p>
<p><span style="color: rgb(185, 106, 217);"><em>Base Case</em>:</span></p>
<p>&nbsp;</p>
<p><span style="color: rgb(185, 106, 217);">We have <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;multinomial(sigma(k),0)=multinomial(0,sigma(k))&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__left-right" style="margin-top: -0.25em; height: 1em;"><span class="ML__small-delim ML__open">(</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">&sigma;</span><span class="ML__left-right" style="margin-top: 0em; height: 0.69444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">,</span><span class="ML__cmr">0</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">=</span><span class="ML__left-right" style="margin-top: -0.25em; height: 1em;"><span class="ML__small-delim ML__open">(</span><span class="ML__cmr">0,</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">&sigma;</span><span class="ML__left-right" style="margin-top: 0em; height: 0.69444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span> by forall minus using the base case from the induction on <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;m&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">m</span></span></span></span></span> above.</span></p>
<p>&nbsp;</p>
<p><em><span style="color: rgb(185, 106, 217);">Induction step:</span></em></p>
<p><span style="color: rgb(185, 106, 217);">&nbsp;</span></p>
<div class="lurch-atom" data-metadata_type="&quot;subproof&quot;" data-shell_title="">
<p><span style="color: rgb(185, 106, 217);"><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;Let j be such that multinomial(sigma(k),j)=multinomial(j,sigma(k))&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__text">Let </span><span class="ML__mathit" style="margin-right: 0.06em;">j</span><span class="ML__text"> be such that </span><span class="ML__left-right" style="margin-top: -0.25em; height: 1em;"><span class="ML__small-delim ML__open">(</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">&sigma;</span><span class="ML__left-right" style="margin-top: 0em; height: 0.69444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">,</span><span class="ML__mathit" style="margin-right: 0.06em;">j</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">=</span><span class="ML__left-right" style="margin-top: -0.25em; height: 1em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.06em;">j</span><span class="ML__cmr">,</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">&sigma;</span><span class="ML__left-right" style="margin-top: 0em; height: 0.69444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span> .&nbsp;</span></p>
<p>&nbsp;</p>
<p><span style="color: rgb(185, 106, 217);">Then by the definition of multinomial coefficient, substitution from the inductive hypothesis for <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;n&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">n</span></span></span></span></span>, forall minus with the inductive hypothesis for&nbsp;<span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;m&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">m</span></span></span></span></span>, commutativity of addition, and the definition of multinomial coefficient, we have&nbsp;</span></p>
<p style="text-align: center;"><span style="color: rgb(185, 106, 217);"><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;multinomial(sigma(k),sigma(j)) \n=multinomial(sigma(k),j)+multinomial(k,sigma(j))\n=multinomial(j,sigma(k))+multinomial(k,sigma(j))\n=multinomial(j,sigma(k))+multinomial(sigma(j),k)\n=multinomial(sigma(j),k)+multinomial(j,sigma(k))\n=multinomial(sigma(j),sigma(k)) &quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mtable"><span class="col-align-r"><span class="ML__vlist-t ML__vlist-t2"><span class="ML__vlist-r"><span class="ML__vlist" style="height: 3.86em;"><span style="top: -6.01em;"><span style="height: 1.5em; display: inline-block;"><span class="ML__left-right" style="margin-top: -0.25em; height: 1em;"><span class="ML__small-delim ML__open">(</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">&sigma;</span><span class="ML__left-right" style="margin-top: 0em; height: 0.69444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">,</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">&sigma;</span><span class="ML__left-right" style="margin-top: -0.19444em; height: 0.85396em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.06em;">j</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__small-delim ML__close">)</span></span></span></span></span><span class="ML__vlist-s">​</span></span></span></span><span class="col-align-l"><span class="ML__vlist-t ML__vlist-t2"><span class="ML__vlist-r"><span class="ML__vlist" style="height: 3.86em;"><span style="top: -6.01em;"><span style="height: 1.5em; display: inline-block;"><span class="ML__cmr">=</span><span class="ML__left-right" style="margin-top: -0.25em; height: 1em;"><span class="ML__small-delim ML__open">(</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">&sigma;</span><span class="ML__left-right" style="margin-top: 0em; height: 0.69444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">,</span><span class="ML__mathit" style="margin-right: 0.06em;">j</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">+</span><span class="ML__left-right" style="margin-top: -0.25em; height: 1em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__cmr">,</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">&sigma;</span><span class="ML__left-right" style="margin-top: -0.19444em; height: 0.85396em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.06em;">j</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__small-delim ML__close">)</span></span></span></span><span style="top: -4.51em;"><span style="height: 1.5em; display: inline-block;"><span class="ML__cmr">=</span><span class="ML__left-right" style="margin-top: -0.25em; height: 1em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.06em;">j</span><span class="ML__cmr">,</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">&sigma;</span><span class="ML__left-right" style="margin-top: 0em; height: 0.69444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">+</span><span class="ML__left-right" style="margin-top: -0.25em; height: 1em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__cmr">,</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">&sigma;</span><span class="ML__left-right" style="margin-top: -0.19444em; height: 0.85396em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.06em;">j</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__small-delim ML__close">)</span></span></span></span><span style="top: -3.01em;"><span style="height: 1.5em; display: inline-block;"><span class="ML__cmr">=</span><span class="ML__left-right" style="margin-top: -0.25em; height: 1em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.06em;">j</span><span class="ML__cmr">,</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">&sigma;</span><span class="ML__left-right" style="margin-top: 0em; height: 0.69444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">+</span><span class="ML__left-right" style="margin-top: -0.25em; height: 1em;"><span class="ML__small-delim ML__open">(</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">&sigma;</span><span class="ML__left-right" style="margin-top: -0.19444em; height: 0.85396em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.06em;">j</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">,</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__small-delim ML__close">)</span></span></span></span><span style="top: -1.51em;"><span style="height: 1.5em; display: inline-block;"><span class="ML__cmr">=</span><span class="ML__left-right" style="margin-top: -0.25em; height: 1em;"><span class="ML__small-delim ML__open">(</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">&sigma;</span><span class="ML__left-right" style="margin-top: -0.19444em; height: 0.85396em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.06em;">j</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">,</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">+</span><span class="ML__left-right" style="margin-top: -0.25em; height: 1em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.06em;">j</span><span class="ML__cmr">,</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">&sigma;</span><span class="ML__left-right" style="margin-top: 0em; height: 0.69444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__small-delim ML__close">)</span></span></span></span><span style="top: -0.01em;"><span style="height: 1.2em; display: inline-block;"><span class="ML__cmr">=</span><span class="ML__left-right" style="margin-top: -0.25em; height: 1em;"><span class="ML__small-delim ML__open">(</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">&sigma;</span><span class="ML__left-right" style="margin-top: -0.19444em; height: 0.85396em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.06em;">j</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">,</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">&sigma;</span><span class="ML__left-right" style="margin-top: 0em; height: 0.69444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__small-delim ML__close">)</span></span></span></span></span><span class="ML__vlist-s">​</span></span></span></span></span></span></span></span></span></span></p>
<p style="text-align: center;">&nbsp;</p>
</div>
<p><span style="color: rgb(185, 106, 217);">Thus, <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;forall n.multinomial(sigma(k),n)=multinomial(n,sigma(k)) &quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">&forall;</span><span class="ML__mathit">n</span><span class="ML__cmr">.</span><span class="ML__left-right" style="margin-top: -0.25em; height: 1em;"><span class="ML__small-delim ML__open">(</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">&sigma;</span><span class="ML__left-right" style="margin-top: 0em; height: 0.69444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">,</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">=</span><span class="ML__left-right" style="margin-top: -0.25em; height: 1em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">n</span><span class="ML__cmr">,</span><span class="lcGreek ML__mathit" style="margin-right: 0.04em;">&sigma;</span><span class="ML__left-right" style="margin-top: 0em; height: 0.69444em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit" style="margin-right: 0.04em;">k</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span> by induction.<br></span></p>
</div>
<p>&nbsp;</p>
<p>But this was exactly what we needed to complete the induction on <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;m&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mathit">m</span></span></span></span></span>, and therefore&nbsp; we conclude <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;forall m.forall n.multinomial(m,n)=multinomial(n,m)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">&forall;</span><span class="ML__mathit">m</span><span class="ML__cmr">.</span><span class="ML__cmr">&forall;</span><span class="ML__mathit">n</span><span class="ML__cmr">.</span><span class="ML__left-right" style="margin-top: -0.19444em; height: 0.625em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">m</span><span class="ML__cmr">,</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">=</span><span class="ML__left-right" style="margin-top: -0.19444em; height: 0.625em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">n</span><span class="ML__cmr">,</span><span class="ML__mathit">m</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span>.</p>
<p style="text-align: left;">&nbsp;</p>
<p style="text-align: left;">Using this result, we can now easily prove the theorem. By forall minus we have <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;forall n.multinomial(m,n)=multinomial(n,m)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__cmr">&forall;</span><span class="ML__mathit">n</span><span class="ML__cmr">.</span><span class="ML__left-right" style="margin-top: -0.19444em; height: 0.625em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">m</span><span class="ML__cmr">,</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">=</span><span class="ML__left-right" style="margin-top: -0.19444em; height: 0.625em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">n</span><span class="ML__cmr">,</span><span class="ML__mathit">m</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span> and <span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;multinomial(m,n)=multinomial(n,m)&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__left-right" style="margin-top: -0.19444em; height: 0.625em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">m</span><span class="ML__cmr">,</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span><span class="ML__cmr">=</span><span class="ML__left-right" style="margin-top: -0.19444em; height: 0.625em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">n</span><span class="ML__cmr">,</span><span class="ML__mathit">m</span><span class="ML__small-delim ML__close">)</span></span></span></span></span></span>. Then by the definition of binomial coefficient and commutativity of addition we have</p>
<p style="text-align: left;">&nbsp;</p>
<p style="text-align: center;"><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expression&quot;" data-metadata_lurch-notation="&quot;n+m choose m = multinomial(n,m)\n             = multinomial(m,n)\n             = (m+n) choose n\n             = (n+m) choose n&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__mtable"><span class="col-align-r"><span class="ML__vlist-t ML__vlist-t2"><span class="ML__vlist-r"><span class="ML__vlist" style="height: 4.91em;"><span style="top: -6.9em;"><span style="height: 2.71em; display: inline-block;"><span class="ML__mfrac"><span class="ML__delim-size3">(</span><span class="ML__vlist-t ML__vlist-t2"><span class="ML__vlist-r"><span class="ML__vlist" style="height: 1.09em;"><span class="ML__center" style="top: -3.5em;"><span style="height: 0.67em; display: inline-block;"><span class="ML__mathit">n</span><span class="ML__cmr">+</span><span class="ML__mathit">m</span></span></span><span class="ML__center" style="top: -2.31em;"><span style="height: 0.44em; display: inline-block;"><span class="ML__mathit">m</span></span></span></span><span class="ML__vlist-s">​</span></span></span><span class="ML__delim-size3">)</span></span></span></span></span><span class="ML__vlist-s">​</span></span></span></span><span class="col-align-l"><span class="ML__vlist-t ML__vlist-t2"><span class="ML__vlist-r"><span class="ML__vlist" style="height: 4.91em;"><span style="top: -6.9em;"><span style="height: 2.71em; display: inline-block;"><span class="ML__cmr">=</span><span class="ML__left-right" style="margin-top: -0.19444em; height: 0.625em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">n</span><span class="ML__cmr">,</span><span class="ML__mathit">m</span><span class="ML__small-delim ML__close">)</span></span></span></span><span style="top: -4.81em;"><span style="height: 1.5em; display: inline-block;"><span class="ML__cmr">=</span><span class="ML__left-right" style="margin-top: -0.19444em; height: 0.625em;"><span class="ML__small-delim ML__open">(</span><span class="ML__mathit">m</span><span class="ML__cmr">,</span><span class="ML__mathit">n</span><span class="ML__small-delim ML__close">)</span></span></span></span><span style="top: -2.7em;"><span style="height: 2.71em; display: inline-block;"><span class="ML__cmr">=</span><span class="ML__mfrac"><span class="ML__delim-size3">(</span><span class="ML__vlist-t ML__vlist-t2"><span class="ML__vlist-r"><span class="ML__vlist" style="height: 1.09em;"><span class="ML__center" style="top: -3.5em;"><span style="height: 0.67em; display: inline-block;"><span class="ML__mathit">m</span><span class="ML__cmr">+</span><span class="ML__mathit">n</span></span></span><span class="ML__center" style="top: -2.31em;"><span style="height: 0.44em; display: inline-block;"><span class="ML__mathit">n</span></span></span></span><span class="ML__vlist-s">​</span></span></span><span class="ML__delim-size3">)</span></span></span></span><span style="top: 0.01em;"><span style="height: 2.41em; display: inline-block;"><span class="ML__cmr">=</span><span class="ML__mfrac"><span class="ML__delim-size3">(</span><span class="ML__vlist-t ML__vlist-t2"><span class="ML__vlist-r"><span class="ML__vlist" style="height: 1.09em;"><span class="ML__center" style="top: -3.5em;"><span style="height: 0.67em; display: inline-block;"><span class="ML__mathit">n</span><span class="ML__cmr">+</span><span class="ML__mathit">m</span></span></span><span class="ML__center" style="top: -2.31em;"><span style="height: 0.44em; display: inline-block;"><span class="ML__mathit">n</span></span></span></span><span class="ML__vlist-s">​</span></span></span><span class="ML__delim-size3">)</span></span></span></span></span><span class="ML__vlist-s">​</span></span></span></span></span></span></span></span></span></p>
<p>&nbsp;</p>
<p style="text-align: left;">&nbsp;as desired.</p>
<p><span class="lurch-atom" contenteditable="false" data-metadata_type="&quot;expositorymath&quot;" data-metadata_latex="&quot;\\square&quot;"><span class="lurch-atom-body"><span class="ML__latex"><span class="ML__base"><span class="ML__ams">□</span></span></span></span></span>&nbsp;</p>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p></div>
        